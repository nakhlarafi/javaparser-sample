---
root(Type=CompilationUnit): 
    packageDeclaration(Type=PackageDeclaration): 
        name(Type=Name): 
            identifier: "time"
            qualifier(Type=Name): 
                identifier: "joda"
                qualifier(Type=Name): 
                    identifier: "org"
    comment(Type=BlockComment): 
        content: "\n *  Copyright 2001-2013 Stephen Colebourne\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n "
    imports: 
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Serializable"
                qualifier(Type=Name): 
                    identifier: "io"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ArrayList"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Arrays"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "List"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Locale"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "AbstractPartial"
                qualifier(Type=Name): 
                    identifier: "base"
                    qualifier(Type=Name): 
                        identifier: "time"
                        qualifier(Type=Name): 
                            identifier: "joda"
                            qualifier(Type=Name): 
                                identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "AbstractPartialFieldProperty"
                qualifier(Type=Name): 
                    identifier: "field"
                    qualifier(Type=Name): 
                        identifier: "time"
                        qualifier(Type=Name): 
                            identifier: "joda"
                            qualifier(Type=Name): 
                                identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "FieldUtils"
                qualifier(Type=Name): 
                    identifier: "field"
                    qualifier(Type=Name): 
                        identifier: "time"
                        qualifier(Type=Name): 
                            identifier: "joda"
                            qualifier(Type=Name): 
                                identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "DateTimeFormat"
                qualifier(Type=Name): 
                    identifier: "format"
                    qualifier(Type=Name): 
                        identifier: "time"
                        qualifier(Type=Name): 
                            identifier: "joda"
                            qualifier(Type=Name): 
                                identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "DateTimeFormatter"
                qualifier(Type=Name): 
                    identifier: "format"
                    qualifier(Type=Name): 
                        identifier: "time"
                        qualifier(Type=Name): 
                            identifier: "joda"
                            qualifier(Type=Name): 
                                identifier: "org"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ISODateTimeFormat"
                qualifier(Type=Name): 
                    identifier: "format"
                    qualifier(Type=Name): 
                        identifier: "time"
                        qualifier(Type=Name): 
                            identifier: "joda"
                            qualifier(Type=Name): 
                                identifier: "org"
    types: 
        - type(Type=ClassOrInterfaceDeclaration): 
            isInterface: "false"
            name(Type=SimpleName): 
                identifier: "Partial"
            comment(Type=JavadocComment): 
                content: "\n * Partial is an immutable partial datetime supporting any set of datetime fields.\n * <p>\n * A Partial instance can be used to hold any combination of fields.\n * The instance does not contain a time zone, so any datetime is local.\n * <p>\n * A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.\n * This method compares each field on this partial with those of the instant\n * and determines if the partial matches the instant.\n * Given this definition, an empty Partial instance represents any datetime\n * and always matches.\n * <p>\n * Calculations on Partial are performed using a {@link Chronology}.\n * This chronology is set to be in the UTC time zone for all calculations.\n * <p>\n * Each individual field can be queried in two ways:\n * <ul>\n * <li><code>get(DateTimeFieldType.monthOfYear())</code>\n * <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value - <code>monthOfYear().get()</code>\n * <li>text value - <code>monthOfYear().getAsText()</code>\n * <li>short text value - <code>monthOfYear().getAsShortText()</code>\n * <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>\n * <li>add/subtract - <code>monthOfYear().addToCopy()</code>\n * <li>set - <code>monthOfYear().setCopy()</code>\n * </ul>\n * <p>\n * Partial is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.1\n "
            extendedTypes: 
                - extendedType(Type=ClassOrInterfaceType): 
                    name(Type=SimpleName): 
                        identifier: "AbstractPartial"
            implementedTypes: 
                - implementedType(Type=ClassOrInterfaceType): 
                    name(Type=SimpleName): 
                        identifier: "ReadablePartial"
                - implementedType(Type=ClassOrInterfaceType): 
                    name(Type=SimpleName): 
                        identifier: "Serializable"
            members: 
                - member(Type=FieldDeclaration): 
                    comment(Type=JavadocComment): 
                        content: " Serialization version "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "STATIC"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=LongLiteralExpr): 
                                value: "12324121189002L"
                            name(Type=SimpleName): 
                                identifier: "serialVersionUID"
                            type(Type=PrimitiveType): 
                                type: "LONG"
                - member(Type=FieldDeclaration): 
                    comment(Type=JavadocComment): 
                        content: " The chronology in use. "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "iChronology"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Chronology"
                - member(Type=FieldDeclaration): 
                    comment(Type=JavadocComment): 
                        content: " The set of field types. "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "iTypes"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "DateTimeFieldType"
                - member(Type=FieldDeclaration): 
                    comment(Type=JavadocComment): 
                        content: " The values of each field in this partial. "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "iValues"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=PrimitiveType): 
                                    type: "INT"
                - member(Type=FieldDeclaration): 
                    comment(Type=JavadocComment): 
                        content: " The formatter to use, [0] may miss some fields, [1] doesn't miss any fields. "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "TRANSIENT"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "iFormatter"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "DateTimeFormatter"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExplicitConstructorInvocationStmt): 
                                isThis: "true"
                                arguments: 
                                    - argument(Type=CastExpr): 
                                        expression(Type=NullLiteralExpr): 
                                        type(Type=ClassOrInterfaceType): 
                                            name(Type=SimpleName): 
                                                identifier: "Chronology"
                    name(Type=SimpleName): 
                        identifier: "Partial"
                    comment(Type=JavadocComment): 
                        content: "\n     * Constructs a Partial with no fields or values, which can be considered\n     * to represent any date.\n     * <p>\n     * This is most useful when constructing partials, for example:\n     * <pre>\n     * Partial p = new Partial()\n     *     .with(DateTimeFieldType.dayOfWeek(), 5)\n     *     .with(DateTimeFieldType.hourOfDay(), 12)\n     *     .with(DateTimeFieldType.minuteOfHour(), 20);\n     * </pre>\n     * Note that, although this is a clean way to write code, it is fairly\n     * inefficient internally.\n     * <p>\n     * The constructor uses the default ISO chronology.\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExplicitConstructorInvocationStmt): 
                                isThis: "false"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iChronology"
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "withUTC"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getChronology"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "DateTimeUtils"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "chrono"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iTypes"
                                    value(Type=ArrayCreationExpr): 
                                        elementType(Type=ClassOrInterfaceType): 
                                            name(Type=SimpleName): 
                                                identifier: "DateTimeFieldType"
                                        levels: 
                                            - level(Type=ArrayCreationLevel): 
                                                dimension(Type=IntegerLiteralExpr): 
                                                    value: "0"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iValues"
                                    value(Type=ArrayCreationExpr): 
                                        elementType(Type=PrimitiveType): 
                                            type: "INT"
                                        levels: 
                                            - level(Type=ArrayCreationLevel): 
                                                dimension(Type=IntegerLiteralExpr): 
                                                    value: "0"
                    name(Type=SimpleName): 
                        identifier: "Partial"
                    comment(Type=JavadocComment): 
                        content: "\n     * Constructs a Partial with no fields or values, which can be considered\n     * to represent any date.\n     * <p>\n     * This is most useful when constructing partials, for example:\n     * <pre>\n     * Partial p = new Partial(chrono)\n     *     .with(DateTimeFieldType.dayOfWeek(), 5)\n     *     .with(DateTimeFieldType.hourOfDay(), 12)\n     *     .with(DateTimeFieldType.minuteOfHour(), 20);\n     * </pre>\n     * Note that, although this is a clean way to write code, it is fairly\n     * inefficient internally.\n     *\n     * @param chrono  the chronology, null means ISO\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "chrono"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Chronology"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExplicitConstructorInvocationStmt): 
                                isThis: "true"
                                arguments: 
                                    - argument(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "type"
                                    - argument(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "value"
                                    - argument(Type=NullLiteralExpr): 
                    name(Type=SimpleName): 
                        identifier: "Partial"
                    comment(Type=JavadocComment): 
                        content: "\n     * Constructs a Partial with the specified field and value.\n     * <p>\n     * The constructor uses the default ISO chronology.\n     * \n     * @param type  the single type to create the partial from, not null\n     * @param value  the value to store\n     * @throws IllegalArgumentException if the type or value is invalid\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "type"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "DateTimeFieldType"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "value"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExplicitConstructorInvocationStmt): 
                                isThis: "false"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "chronology"
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "withUTC"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getChronology"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "DateTimeUtils"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "chronology"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iChronology"
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "chronology"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "type"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ThrowStmt): 
                                            expression(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "IllegalArgumentException"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "The field type must not be null"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iTypes"
                                    value(Type=ArrayCreationExpr): 
                                        elementType(Type=ClassOrInterfaceType): 
                                            name(Type=SimpleName): 
                                                identifier: "DateTimeFieldType"
                                        initializer(Type=ArrayInitializerExpr): 
                                            values: 
                                                - value(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "type"
                                        levels: 
                                            - level(Type=ArrayCreationLevel): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iValues"
                                    value(Type=ArrayCreationExpr): 
                                        elementType(Type=PrimitiveType): 
                                            type: "INT"
                                        initializer(Type=ArrayInitializerExpr): 
                                            values: 
                                                - value(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "value"
                                        levels: 
                                            - level(Type=ArrayCreationLevel): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "validate"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "chronology"
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "iValues"
                    name(Type=SimpleName): 
                        identifier: "Partial"
                    comment(Type=JavadocComment): 
                        content: "\n     * Constructs a Partial with the specified field and value.\n     * <p>\n     * The constructor uses the specified chronology.\n     * \n     * @param type  the single type to create the partial from, not null\n     * @param value  the value to store\n     * @param chronology  the chronology, null means ISO\n     * @throws IllegalArgumentException if the type or value is invalid\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "type"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "DateTimeFieldType"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "value"
                            type(Type=PrimitiveType): 
                                type: "INT"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "chronology"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Chronology"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExplicitConstructorInvocationStmt): 
                                isThis: "true"
                                arguments: 
                                    - argument(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "types"
                                    - argument(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "values"
                                    - argument(Type=NullLiteralExpr): 
                    name(Type=SimpleName): 
                        identifier: "Partial"
                    comment(Type=JavadocComment): 
                        content: "\n     * Constructs a Partial with the specified fields and values.\n     * The fields must be specified in the order largest to smallest.\n     * <p>\n     * The constructor uses the specified chronology.\n     * \n     * @param types  the types to create the partial from, not null\n     * @param values  the values to store, not null\n     * @throws IllegalArgumentException if the types or values are invalid\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "types"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "DateTimeFieldType"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "values"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=PrimitiveType): 
                                    type: "INT"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExplicitConstructorInvocationStmt): 
                                isThis: "false"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "chronology"
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "withUTC"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getChronology"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "DateTimeUtils"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "chronology"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iChronology"
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "chronology"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "types"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ThrowStmt): 
                                            expression(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "IllegalArgumentException"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "Types array must not be null"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "values"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ThrowStmt): 
                                            expression(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "IllegalArgumentException"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "Values array must not be null"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "NOT_EQUALS"
                                    left(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "length"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "values"
                                    right(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "length"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "types"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ThrowStmt): 
                                            expression(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "IllegalArgumentException"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "Values array must be the same length as the types array"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "length"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "types"
                                    right(Type=IntegerLiteralExpr): 
                                        value: "0"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "iTypes"
                                                value(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "types"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "iValues"
                                                value(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "values"
                                        - statement(Type=ReturnStmt): 
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "EQUALS"
                                                left(Type=ArrayAccessExpr): 
                                                    index(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    name(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "types"
                                                right(Type=NullLiteralExpr): 
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ThrowStmt): 
                                                        expression(Type=ObjectCreationExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "IllegalArgumentException"
                                                            arguments: 
                                                                - argument(Type=BinaryExpr): 
                                                                    operator: "PLUS"
                                                                    left(Type=StringLiteralExpr): 
                                                                        value: "Types array must not contain null: index "
                                                                    right(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "i"
                                compare(Type=BinaryExpr): 
                                    operator: "LESS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i"
                                    right(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "length"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "types"
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                                type(Type=PrimitiveType): 
                                                    type: "INT"
                                update: 
                                    - update(Type=UnaryExpr): 
                                        operator: "POSTFIX_INCREMENT"
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=NullLiteralExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "lastUnitField"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "DurationField"
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=ArrayAccessExpr): 
                                                            index(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                            name(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "types"
                                                        name(Type=SimpleName): 
                                                            identifier: "loopType"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "DateTimeFieldType"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "getField"
                                                            scope(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "getDurationType"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "loopType"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "iChronology"
                                                        name(Type=SimpleName): 
                                                            identifier: "loopUnitField"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "DurationField"
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "GREATER"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                                                right(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=VariableDeclarationExpr): 
                                                            variables: 
                                                                - variable(Type=VariableDeclarator): 
                                                                    initializer(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "compareTo"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "lastUnitField"
                                                                        arguments: 
                                                                            - argument(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "loopUnitField"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "compare"
                                                                    type(Type=PrimitiveType): 
                                                                        type: "INT"
                                                    - statement(Type=IfStmt): 
                                                        condition(Type=BinaryExpr): 
                                                            operator: "LESS"
                                                            left(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "compare"
                                                            right(Type=IntegerLiteralExpr): 
                                                                value: "0"
                                                        elseStmt(Type=IfStmt): 
                                                            condition(Type=BinaryExpr): 
                                                                operator: "EQUALS"
                                                                left(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "compare"
                                                                right(Type=IntegerLiteralExpr): 
                                                                    value: "0"
                                                            thenStmt(Type=BlockStmt): 
                                                                statements: 
                                                                    - statement(Type=IfStmt): 
                                                                        condition(Type=BinaryExpr): 
                                                                            operator: "EQUALS"
                                                                            left(Type=MethodCallExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "getRangeDurationType"
                                                                                scope(Type=ArrayAccessExpr): 
                                                                                    index(Type=BinaryExpr): 
                                                                                        operator: "MINUS"
                                                                                        left(Type=NameExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "i"
                                                                                        right(Type=IntegerLiteralExpr): 
                                                                                            value: "1"
                                                                                    name(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "types"
                                                                            right(Type=NullLiteralExpr): 
                                                                        elseStmt(Type=BlockStmt): 
                                                                            statements: 
                                                                                - statement(Type=IfStmt): 
                                                                                    condition(Type=BinaryExpr): 
                                                                                        operator: "EQUALS"
                                                                                        left(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "getRangeDurationType"
                                                                                            scope(Type=NameExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "loopType"
                                                                                        right(Type=NullLiteralExpr): 
                                                                                    thenStmt(Type=BlockStmt): 
                                                                                        statements: 
                                                                                            - statement(Type=ThrowStmt): 
                                                                                                expression(Type=ObjectCreationExpr): 
                                                                                                    type(Type=ClassOrInterfaceType): 
                                                                                                        name(Type=SimpleName): 
                                                                                                            identifier: "IllegalArgumentException"
                                                                                                    arguments: 
                                                                                                        - argument(Type=BinaryExpr): 
                                                                                                            operator: "PLUS"
                                                                                                            left(Type=BinaryExpr): 
                                                                                                                operator: "PLUS"
                                                                                                                left(Type=BinaryExpr): 
                                                                                                                    operator: "PLUS"
                                                                                                                    left(Type=StringLiteralExpr): 
                                                                                                                        value: "Types array must be in order largest-smallest: "
                                                                                                                    right(Type=MethodCallExpr): 
                                                                                                                        name(Type=SimpleName): 
                                                                                                                            identifier: "getName"
                                                                                                                        scope(Type=ArrayAccessExpr): 
                                                                                                                            index(Type=BinaryExpr): 
                                                                                                                                operator: "MINUS"
                                                                                                                                left(Type=NameExpr): 
                                                                                                                                    name(Type=SimpleName): 
                                                                                                                                        identifier: "i"
                                                                                                                                right(Type=IntegerLiteralExpr): 
                                                                                                                                    value: "1"
                                                                                                                            name(Type=NameExpr): 
                                                                                                                                name(Type=SimpleName): 
                                                                                                                                    identifier: "types"
                                                                                                                right(Type=StringLiteralExpr): 
                                                                                                                    value: " < "
                                                                                                            right(Type=MethodCallExpr): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "getName"
                                                                                                                scope(Type=NameExpr): 
                                                                                                                    name(Type=SimpleName): 
                                                                                                                        identifier: "loopType"
                                                                                - statement(Type=ExpressionStmt): 
                                                                                    expression(Type=VariableDeclarationExpr): 
                                                                                        variables: 
                                                                                            - variable(Type=VariableDeclarator): 
                                                                                                initializer(Type=MethodCallExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "getField"
                                                                                                    scope(Type=MethodCallExpr): 
                                                                                                        name(Type=SimpleName): 
                                                                                                            identifier: "getRangeDurationType"
                                                                                                        scope(Type=ArrayAccessExpr): 
                                                                                                            index(Type=BinaryExpr): 
                                                                                                                operator: "MINUS"
                                                                                                                left(Type=NameExpr): 
                                                                                                                    name(Type=SimpleName): 
                                                                                                                        identifier: "i"
                                                                                                                right(Type=IntegerLiteralExpr): 
                                                                                                                    value: "1"
                                                                                                            name(Type=NameExpr): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "types"
                                                                                                    arguments: 
                                                                                                        - argument(Type=NameExpr): 
                                                                                                            name(Type=SimpleName): 
                                                                                                                identifier: "iChronology"
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "lastRangeField"
                                                                                                type(Type=ClassOrInterfaceType): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "DurationField"
                                                                                - statement(Type=ExpressionStmt): 
                                                                                    expression(Type=VariableDeclarationExpr): 
                                                                                        variables: 
                                                                                            - variable(Type=VariableDeclarator): 
                                                                                                initializer(Type=MethodCallExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "getField"
                                                                                                    scope(Type=MethodCallExpr): 
                                                                                                        name(Type=SimpleName): 
                                                                                                            identifier: "getRangeDurationType"
                                                                                                        scope(Type=NameExpr): 
                                                                                                            name(Type=SimpleName): 
                                                                                                                identifier: "loopType"
                                                                                                    arguments: 
                                                                                                        - argument(Type=NameExpr): 
                                                                                                            name(Type=SimpleName): 
                                                                                                                identifier: "iChronology"
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "loopRangeField"
                                                                                                type(Type=ClassOrInterfaceType): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "DurationField"
                                                                                - statement(Type=IfStmt): 
                                                                                    condition(Type=BinaryExpr): 
                                                                                        operator: "LESS"
                                                                                        left(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "compareTo"
                                                                                            scope(Type=NameExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "lastRangeField"
                                                                                            arguments: 
                                                                                                - argument(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "loopRangeField"
                                                                                        right(Type=IntegerLiteralExpr): 
                                                                                            value: "0"
                                                                                    thenStmt(Type=BlockStmt): 
                                                                                        statements: 
                                                                                            - statement(Type=ThrowStmt): 
                                                                                                expression(Type=ObjectCreationExpr): 
                                                                                                    type(Type=ClassOrInterfaceType): 
                                                                                                        name(Type=SimpleName): 
                                                                                                            identifier: "IllegalArgumentException"
                                                                                                    arguments: 
                                                                                                        - argument(Type=BinaryExpr): 
                                                                                                            operator: "PLUS"
                                                                                                            left(Type=BinaryExpr): 
                                                                                                                operator: "PLUS"
                                                                                                                left(Type=BinaryExpr): 
                                                                                                                    operator: "PLUS"
                                                                                                                    left(Type=StringLiteralExpr): 
                                                                                                                        value: "Types array must be in order largest-smallest: "
                                                                                                                    right(Type=MethodCallExpr): 
                                                                                                                        name(Type=SimpleName): 
                                                                                                                            identifier: "getName"
                                                                                                                        scope(Type=ArrayAccessExpr): 
                                                                                                                            index(Type=BinaryExpr): 
                                                                                                                                operator: "MINUS"
                                                                                                                                left(Type=NameExpr): 
                                                                                                                                    name(Type=SimpleName): 
                                                                                                                                        identifier: "i"
                                                                                                                                right(Type=IntegerLiteralExpr): 
                                                                                                                                    value: "1"
                                                                                                                            name(Type=NameExpr): 
                                                                                                                                name(Type=SimpleName): 
                                                                                                                                    identifier: "types"
                                                                                                                right(Type=StringLiteralExpr): 
                                                                                                                    value: " < "
                                                                                                            right(Type=MethodCallExpr): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "getName"
                                                                                                                scope(Type=NameExpr): 
                                                                                                                    name(Type=SimpleName): 
                                                                                                                        identifier: "loopType"
                                                                                - statement(Type=IfStmt): 
                                                                                    condition(Type=BinaryExpr): 
                                                                                        operator: "EQUALS"
                                                                                        left(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "compareTo"
                                                                                            scope(Type=NameExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "lastRangeField"
                                                                                            arguments: 
                                                                                                - argument(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "loopRangeField"
                                                                                        right(Type=IntegerLiteralExpr): 
                                                                                            value: "0"
                                                                                    thenStmt(Type=BlockStmt): 
                                                                                        statements: 
                                                                                            - statement(Type=ThrowStmt): 
                                                                                                expression(Type=ObjectCreationExpr): 
                                                                                                    type(Type=ClassOrInterfaceType): 
                                                                                                        name(Type=SimpleName): 
                                                                                                            identifier: "IllegalArgumentException"
                                                                                                    arguments: 
                                                                                                        - argument(Type=BinaryExpr): 
                                                                                                            operator: "PLUS"
                                                                                                            left(Type=BinaryExpr): 
                                                                                                                operator: "PLUS"
                                                                                                                left(Type=BinaryExpr): 
                                                                                                                    operator: "PLUS"
                                                                                                                    left(Type=StringLiteralExpr): 
                                                                                                                        value: "Types array must not contain duplicate: "
                                                                                                                    right(Type=MethodCallExpr): 
                                                                                                                        name(Type=SimpleName): 
                                                                                                                            identifier: "getName"
                                                                                                                        scope(Type=ArrayAccessExpr): 
                                                                                                                            index(Type=BinaryExpr): 
                                                                                                                                operator: "MINUS"
                                                                                                                                left(Type=NameExpr): 
                                                                                                                                    name(Type=SimpleName): 
                                                                                                                                        identifier: "i"
                                                                                                                                right(Type=IntegerLiteralExpr): 
                                                                                                                                    value: "1"
                                                                                                                            name(Type=NameExpr): 
                                                                                                                                name(Type=SimpleName): 
                                                                                                                                    identifier: "types"
                                                                                                                right(Type=StringLiteralExpr): 
                                                                                                                    value: " and "
                                                                                                            right(Type=MethodCallExpr): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "getName"
                                                                                                                scope(Type=NameExpr): 
                                                                                                                    name(Type=SimpleName): 
                                                                                                                        identifier: "loopType"
                                                                        thenStmt(Type=BlockStmt): 
                                                                            statements: 
                                                                                - statement(Type=IfStmt): 
                                                                                    condition(Type=BinaryExpr): 
                                                                                        operator: "EQUALS"
                                                                                        left(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "getRangeDurationType"
                                                                                            scope(Type=NameExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "loopType"
                                                                                        right(Type=NullLiteralExpr): 
                                                                                    thenStmt(Type=BlockStmt): 
                                                                                        statements: 
                                                                                            - statement(Type=ThrowStmt): 
                                                                                                expression(Type=ObjectCreationExpr): 
                                                                                                    type(Type=ClassOrInterfaceType): 
                                                                                                        name(Type=SimpleName): 
                                                                                                            identifier: "IllegalArgumentException"
                                                                                                    arguments: 
                                                                                                        - argument(Type=BinaryExpr): 
                                                                                                            operator: "PLUS"
                                                                                                            left(Type=BinaryExpr): 
                                                                                                                operator: "PLUS"
                                                                                                                left(Type=BinaryExpr): 
                                                                                                                    operator: "PLUS"
                                                                                                                    left(Type=StringLiteralExpr): 
                                                                                                                        value: "Types array must not contain duplicate: "
                                                                                                                    right(Type=MethodCallExpr): 
                                                                                                                        name(Type=SimpleName): 
                                                                                                                            identifier: "getName"
                                                                                                                        scope(Type=ArrayAccessExpr): 
                                                                                                                            index(Type=BinaryExpr): 
                                                                                                                                operator: "MINUS"
                                                                                                                                left(Type=NameExpr): 
                                                                                                                                    name(Type=SimpleName): 
                                                                                                                                        identifier: "i"
                                                                                                                                right(Type=IntegerLiteralExpr): 
                                                                                                                                    value: "1"
                                                                                                                            name(Type=NameExpr): 
                                                                                                                                name(Type=SimpleName): 
                                                                                                                                    identifier: "types"
                                                                                                                right(Type=StringLiteralExpr): 
                                                                                                                    value: " and "
                                                                                                            right(Type=MethodCallExpr): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "getName"
                                                                                                                scope(Type=NameExpr): 
                                                                                                                    name(Type=SimpleName): 
                                                                                                                        identifier: "loopType"
                                                        thenStmt(Type=BlockStmt): 
                                                            statements: 
                                                                - statement(Type=ThrowStmt): 
                                                                    expression(Type=ObjectCreationExpr): 
                                                                        type(Type=ClassOrInterfaceType): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "IllegalArgumentException"
                                                                        arguments: 
                                                                            - argument(Type=BinaryExpr): 
                                                                                operator: "PLUS"
                                                                                left(Type=BinaryExpr): 
                                                                                    operator: "PLUS"
                                                                                    left(Type=BinaryExpr): 
                                                                                        operator: "PLUS"
                                                                                        left(Type=StringLiteralExpr): 
                                                                                            value: "Types array must be in order largest-smallest: "
                                                                                        right(Type=MethodCallExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "getName"
                                                                                            scope(Type=ArrayAccessExpr): 
                                                                                                index(Type=BinaryExpr): 
                                                                                                    operator: "MINUS"
                                                                                                    left(Type=NameExpr): 
                                                                                                        name(Type=SimpleName): 
                                                                                                            identifier: "i"
                                                                                                    right(Type=IntegerLiteralExpr): 
                                                                                                        value: "1"
                                                                                                name(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "types"
                                                                                    right(Type=StringLiteralExpr): 
                                                                                        value: " < "
                                                                                right(Type=MethodCallExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "getName"
                                                                                    scope(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "loopType"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "lastUnitField"
                                                value(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "loopUnitField"
                                compare(Type=BinaryExpr): 
                                    operator: "LESS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i"
                                    right(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "length"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "types"
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                                type(Type=PrimitiveType): 
                                                    type: "INT"
                                update: 
                                    - update(Type=UnaryExpr): 
                                        operator: "POSTFIX_INCREMENT"
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iTypes"
                                    value(Type=CastExpr): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "clone"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "types"
                                        type(Type=ArrayType): 
                                            origin: "TYPE"
                                            componentType(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "DateTimeFieldType"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "validate"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "chronology"
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "values"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iValues"
                                    value(Type=CastExpr): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "clone"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "values"
                                        type(Type=ArrayType): 
                                            origin: "TYPE"
                                            componentType(Type=PrimitiveType): 
                                                type: "INT"
                    name(Type=SimpleName): 
                        identifier: "Partial"
                    comment(Type=JavadocComment): 
                        content: "\n     * Constructs a Partial with the specified fields and values.\n     * The fields must be specified in the order largest to smallest.\n     * <p>\n     * The constructor uses the specified chronology.\n     * \n     * @param types  the types to create the partial from, not null\n     * @param values  the values to store, not null\n     * @param chronology  the chronology, null means ISO\n     * @throws IllegalArgumentException if the types or values are invalid\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "types"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "DateTimeFieldType"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "values"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=PrimitiveType): 
                                    type: "INT"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "chronology"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Chronology"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExplicitConstructorInvocationStmt): 
                                isThis: "false"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "partial"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ThrowStmt): 
                                            expression(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "IllegalArgumentException"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "The partial must not be null"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iChronology"
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "withUTC"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getChronology"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "DateTimeUtils"
                                            arguments: 
                                                - argument(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getChronology"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "partial"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iTypes"
                                    value(Type=ArrayCreationExpr): 
                                        elementType(Type=ClassOrInterfaceType): 
                                            name(Type=SimpleName): 
                                                identifier: "DateTimeFieldType"
                                        levels: 
                                            - level(Type=ArrayCreationLevel): 
                                                dimension(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "partial"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iValues"
                                    value(Type=ArrayCreationExpr): 
                                        elementType(Type=PrimitiveType): 
                                            type: "INT"
                                        levels: 
                                            - level(Type=ArrayCreationLevel): 
                                                dimension(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "partial"
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=ArrayAccessExpr): 
                                                    index(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    name(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iTypes"
                                                value(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getFieldType"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "partial"
                                                    arguments: 
                                                        - argument(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "i"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=ArrayAccessExpr): 
                                                    index(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    name(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iValues"
                                                value(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getValue"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "partial"
                                                    arguments: 
                                                        - argument(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "i"
                                compare(Type=BinaryExpr): 
                                    operator: "LESS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i"
                                    right(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "size"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "partial"
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                                type(Type=PrimitiveType): 
                                                    type: "INT"
                                update: 
                                    - update(Type=UnaryExpr): 
                                        operator: "POSTFIX_INCREMENT"
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                    name(Type=SimpleName): 
                        identifier: "Partial"
                    comment(Type=JavadocComment): 
                        content: "\n     * Constructs a Partial by copying all the fields and types from\n     * another partial.\n     * <p>\n     * This is most useful when copying from a YearMonthDay or TimeOfDay.\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "partial"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ReadablePartial"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExplicitConstructorInvocationStmt): 
                                isThis: "false"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iChronology"
                                    value(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iChronology"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "partial"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iTypes"
                                    value(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iTypes"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "partial"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iValues"
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "values"
                    name(Type=SimpleName): 
                        identifier: "Partial"
                    comment(Type=JavadocComment): 
                        content: "\n     * Constructs a Partial with the specified values.\n     * This constructor assigns and performs no validation.\n     * \n     * @param partial  the partial to copy\n     * @param values  the values to store\n     * @throws IllegalArgumentException if the types or values are invalid\n     "
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "partial"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Partial"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "values"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=PrimitiveType): 
                                    type: "INT"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExplicitConstructorInvocationStmt): 
                                isThis: "false"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iChronology"
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "chronology"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iTypes"
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "types"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iValues"
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "values"
                    name(Type=SimpleName): 
                        identifier: "Partial"
                    comment(Type=JavadocComment): 
                        content: "\n     * Constructs a Partial with the specified chronology, fields and values.\n     * This constructor assigns and performs no validation.\n     * \n     * @param chronology  the chronology\n     * @param types  the types to create the partial from\n     * @param values  the values to store\n     * @throws IllegalArgumentException if the types or values are invalid\n     "
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "chronology"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Chronology"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "types"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "DateTimeFieldType"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "values"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=PrimitiveType): 
                                    type: "INT"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=FieldAccessExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "length"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iTypes"
                    type(Type=PrimitiveType): 
                        type: "INT"
                    name(Type=SimpleName): 
                        identifier: "size"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets the number of fields in this partial.\n     * \n     * @return the field count\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "iChronology"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Chronology"
                    name(Type=SimpleName): 
                        identifier: "getChronology"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets the chronology of the partial which is never null.\n     * <p>\n     * The {@link Chronology} is the calculation engine behind the partial and\n     * provides conversion and validation of the fields in a particular calendar system.\n     * \n     * @return the chronology, never null\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "getField"
                                    scope(Type=ArrayAccessExpr): 
                                        index(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "index"
                                        name(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "iTypes"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "chrono"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "DateTimeField"
                    name(Type=SimpleName): 
                        identifier: "getField"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets the field for a specific index in the chronology specified.\n     * \n     * @param index  the index to retrieve\n     * @param chrono  the chronology to use\n     * @return the field\n     * @throws IndexOutOfBoundsException if the index is invalid\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PROTECTED"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "index"
                            type(Type=PrimitiveType): 
                                type: "INT"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "chrono"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Chronology"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=ArrayAccessExpr): 
                                    index(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "index"
                                    name(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iTypes"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "DateTimeFieldType"
                    name(Type=SimpleName): 
                        identifier: "getFieldType"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets the field type at the specified index.\n     *\n     * @param index  the index to retrieve\n     * @return the field at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "index"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=CastExpr): 
                                    expression(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "clone"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "iTypes"
                                    type(Type=ArrayType): 
                                        origin: "TYPE"
                                        componentType(Type=ClassOrInterfaceType): 
                                            name(Type=SimpleName): 
                                                identifier: "DateTimeFieldType"
                    type(Type=ArrayType): 
                        origin: "TYPE"
                        componentType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "DateTimeFieldType"
                    name(Type=SimpleName): 
                        identifier: "getFieldTypes"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets an array of the field type of each of the fields that\n     * this partial supports.\n     * <p>\n     * The fields are returned largest to smallest.\n     *\n     * @return the array of field types (cloned), largest to smallest\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=ArrayAccessExpr): 
                                    index(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "index"
                                    name(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "iValues"
                    type(Type=PrimitiveType): 
                        type: "INT"
                    name(Type=SimpleName): 
                        identifier: "getValue"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets the value of the field at the specifed index.\n     * \n     * @param index  the index\n     * @return the value\n     * @throws IndexOutOfBoundsException if the index is invalid\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "index"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=CastExpr): 
                                    expression(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "clone"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "iValues"
                                    type(Type=ArrayType): 
                                        origin: "TYPE"
                                        componentType(Type=PrimitiveType): 
                                            type: "INT"
                    type(Type=ArrayType): 
                        origin: "TYPE"
                        componentType(Type=PrimitiveType): 
                            type: "INT"
                    name(Type=SimpleName): 
                        identifier: "getValues"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets an array of the value of each of the fields that\n     * this partial supports.\n     * <p>\n     * The fields are returned largest to smallest.\n     * Each value corresponds to the same array index as <code>getFieldTypes()</code>\n     *\n     * @return the current values of each field (cloned), largest to smallest\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "newChronology"
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "getChronology"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "DateTimeUtils"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "newChronology"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "newChronology"
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "withUTC"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "newChronology"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "newChronology"
                                    right(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "getChronology"
                                elseStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=ObjectCreationExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Partial"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "newChronology"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "iTypes"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "iValues"
                                                        name(Type=SimpleName): 
                                                            identifier: "newPartial"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Partial"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "validate"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "newChronology"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newPartial"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iValues"
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "newPartial"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=ThisExpr): 
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Partial"
                    name(Type=SimpleName): 
                        identifier: "withChronologyRetainFields"
                    comment(Type=JavadocComment): 
                        content: "\n     * Creates a new Partial instance with the specified chronology.\n     * This instance is immutable and unaffected by this method call.\n     * <p>\n     * This method retains the values of the fields, thus the result will\n     * typically refer to a different instant.\n     * <p>\n     * The time zone of the specified chronology is ignored, as Partial\n     * operates without a time zone.\n     *\n     * @param newChronology  the new chronology, null means ISO\n     * @return a copy of this datetime with a different chronology\n     * @throws IllegalArgumentException if the values are invalid for the new chronology\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "newChronology"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Chronology"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "fieldType"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ThrowStmt): 
                                            expression(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "IllegalArgumentException"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "The field type must not be null"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "indexOf"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "fieldType"
                                            name(Type=SimpleName): 
                                                identifier: "index"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "index"
                                    right(Type=UnaryExpr): 
                                        operator: "MINUS"
                                        expression(Type=IntegerLiteralExpr): 
                                            value: "1"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=ArrayCreationExpr): 
                                                            elementType(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "DateTimeFieldType"
                                                            levels: 
                                                                - level(Type=ArrayCreationLevel): 
                                                                    dimension(Type=BinaryExpr): 
                                                                        operator: "PLUS"
                                                                        left(Type=FieldAccessExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "length"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "iTypes"
                                                                        right(Type=IntegerLiteralExpr): 
                                                                            value: "1"
                                                        name(Type=SimpleName): 
                                                            identifier: "newTypes"
                                                        type(Type=ArrayType): 
                                                            origin: "TYPE"
                                                            componentType(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "DateTimeFieldType"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=ArrayCreationExpr): 
                                                            elementType(Type=PrimitiveType): 
                                                                type: "INT"
                                                            levels: 
                                                                - level(Type=ArrayCreationLevel): 
                                                                    dimension(Type=FieldAccessExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "length"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "newTypes"
                                                        name(Type=SimpleName): 
                                                            identifier: "newValues"
                                                        type(Type=ArrayType): 
                                                            origin: "TYPE"
                                                            componentType(Type=PrimitiveType): 
                                                                type: "INT"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=IntegerLiteralExpr): 
                                                            value: "0"
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                            comment(Type=LineComment): 
                                                content: " find correct insertion point to keep largest-smallest order"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "getField"
                                                            scope(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "getDurationType"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "fieldType"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "iChronology"
                                                        name(Type=SimpleName): 
                                                            identifier: "unitField"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "DurationField"
                                        - statement(Type=IfStmt): 
                                            condition(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "isSupported"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "unitField"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ForStmt): 
                                                        body(Type=BlockStmt): 
                                                            statements: 
                                                                - statement(Type=ExpressionStmt): 
                                                                    expression(Type=VariableDeclarationExpr): 
                                                                        variables: 
                                                                            - variable(Type=VariableDeclarator): 
                                                                                initializer(Type=ArrayAccessExpr): 
                                                                                    index(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "i"
                                                                                    name(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "iTypes"
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "loopType"
                                                                                type(Type=ClassOrInterfaceType): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "DateTimeFieldType"
                                                                - statement(Type=ExpressionStmt): 
                                                                    expression(Type=VariableDeclarationExpr): 
                                                                        variables: 
                                                                            - variable(Type=VariableDeclarator): 
                                                                                initializer(Type=MethodCallExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "getField"
                                                                                    scope(Type=MethodCallExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "getDurationType"
                                                                                        scope(Type=NameExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "loopType"
                                                                                    arguments: 
                                                                                        - argument(Type=NameExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "iChronology"
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "loopUnitField"
                                                                                type(Type=ClassOrInterfaceType): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "DurationField"
                                                                - statement(Type=IfStmt): 
                                                                    condition(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "isSupported"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "loopUnitField"
                                                                    thenStmt(Type=BlockStmt): 
                                                                        statements: 
                                                                            - statement(Type=ExpressionStmt): 
                                                                                expression(Type=VariableDeclarationExpr): 
                                                                                    variables: 
                                                                                        - variable(Type=VariableDeclarator): 
                                                                                            initializer(Type=MethodCallExpr): 
                                                                                                name(Type=SimpleName): 
                                                                                                    identifier: "compareTo"
                                                                                                scope(Type=NameExpr): 
                                                                                                    name(Type=SimpleName): 
                                                                                                        identifier: "unitField"
                                                                                                arguments: 
                                                                                                    - argument(Type=NameExpr): 
                                                                                                        name(Type=SimpleName): 
                                                                                                            identifier: "loopUnitField"
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "compare"
                                                                                            type(Type=PrimitiveType): 
                                                                                                type: "INT"
                                                                            - statement(Type=IfStmt): 
                                                                                condition(Type=BinaryExpr): 
                                                                                    operator: "GREATER"
                                                                                    left(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "compare"
                                                                                    right(Type=IntegerLiteralExpr): 
                                                                                        value: "0"
                                                                                elseStmt(Type=IfStmt): 
                                                                                    condition(Type=BinaryExpr): 
                                                                                        operator: "EQUALS"
                                                                                        left(Type=NameExpr): 
                                                                                            name(Type=SimpleName): 
                                                                                                identifier: "compare"
                                                                                        right(Type=IntegerLiteralExpr): 
                                                                                            value: "0"
                                                                                    thenStmt(Type=BlockStmt): 
                                                                                        statements: 
                                                                                            - statement(Type=IfStmt): 
                                                                                                condition(Type=BinaryExpr): 
                                                                                                    operator: "EQUALS"
                                                                                                    left(Type=MethodCallExpr): 
                                                                                                        name(Type=SimpleName): 
                                                                                                            identifier: "getRangeDurationType"
                                                                                                        scope(Type=NameExpr): 
                                                                                                            name(Type=SimpleName): 
                                                                                                                identifier: "fieldType"
                                                                                                    right(Type=NullLiteralExpr): 
                                                                                                thenStmt(Type=BlockStmt): 
                                                                                                    statements: 
                                                                                                        - statement(Type=BreakStmt): 
                                                                                            - statement(Type=ExpressionStmt): 
                                                                                                expression(Type=VariableDeclarationExpr): 
                                                                                                    variables: 
                                                                                                        - variable(Type=VariableDeclarator): 
                                                                                                            initializer(Type=MethodCallExpr): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "getField"
                                                                                                                scope(Type=MethodCallExpr): 
                                                                                                                    name(Type=SimpleName): 
                                                                                                                        identifier: "getRangeDurationType"
                                                                                                                    scope(Type=NameExpr): 
                                                                                                                        name(Type=SimpleName): 
                                                                                                                            identifier: "fieldType"
                                                                                                                arguments: 
                                                                                                                    - argument(Type=NameExpr): 
                                                                                                                        name(Type=SimpleName): 
                                                                                                                            identifier: "iChronology"
                                                                                                            name(Type=SimpleName): 
                                                                                                                identifier: "rangeField"
                                                                                                            type(Type=ClassOrInterfaceType): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "DurationField"
                                                                                            - statement(Type=ExpressionStmt): 
                                                                                                expression(Type=VariableDeclarationExpr): 
                                                                                                    variables: 
                                                                                                        - variable(Type=VariableDeclarator): 
                                                                                                            initializer(Type=MethodCallExpr): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "getField"
                                                                                                                scope(Type=MethodCallExpr): 
                                                                                                                    name(Type=SimpleName): 
                                                                                                                        identifier: "getRangeDurationType"
                                                                                                                    scope(Type=NameExpr): 
                                                                                                                        name(Type=SimpleName): 
                                                                                                                            identifier: "loopType"
                                                                                                                arguments: 
                                                                                                                    - argument(Type=NameExpr): 
                                                                                                                        name(Type=SimpleName): 
                                                                                                                            identifier: "iChronology"
                                                                                                            name(Type=SimpleName): 
                                                                                                                identifier: "loopRangeField"
                                                                                                            type(Type=ClassOrInterfaceType): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "DurationField"
                                                                                            - statement(Type=IfStmt): 
                                                                                                condition(Type=BinaryExpr): 
                                                                                                    operator: "GREATER"
                                                                                                    left(Type=MethodCallExpr): 
                                                                                                        name(Type=SimpleName): 
                                                                                                            identifier: "compareTo"
                                                                                                        scope(Type=NameExpr): 
                                                                                                            name(Type=SimpleName): 
                                                                                                                identifier: "rangeField"
                                                                                                        arguments: 
                                                                                                            - argument(Type=NameExpr): 
                                                                                                                name(Type=SimpleName): 
                                                                                                                    identifier: "loopRangeField"
                                                                                                    right(Type=IntegerLiteralExpr): 
                                                                                                        value: "0"
                                                                                                thenStmt(Type=BlockStmt): 
                                                                                                    statements: 
                                                                                                        - statement(Type=BreakStmt): 
                                                                                thenStmt(Type=BlockStmt): 
                                                                                    statements: 
                                                                                        - statement(Type=BreakStmt): 
                                                        compare(Type=BinaryExpr): 
                                                            operator: "LESS"
                                                            left(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                            right(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "length"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "iTypes"
                                                        update: 
                                                            - update(Type=UnaryExpr): 
                                                                operator: "POSTFIX_INCREMENT"
                                                                expression(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "i"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "arraycopy"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "System"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iTypes"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newTypes"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "arraycopy"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "System"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iValues"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newValues"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=ArrayAccessExpr): 
                                                    index(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    name(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newTypes"
                                                value(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "fieldType"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=ArrayAccessExpr): 
                                                    index(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    name(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newValues"
                                                value(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "value"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "arraycopy"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "System"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iTypes"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newTypes"
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "PLUS"
                                                        left(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "i"
                                                        right(Type=IntegerLiteralExpr): 
                                                            value: "1"
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "MINUS"
                                                        left(Type=BinaryExpr): 
                                                            operator: "MINUS"
                                                            left(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "length"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "newTypes"
                                                            right(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                        right(Type=IntegerLiteralExpr): 
                                                            value: "1"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "arraycopy"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "System"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iValues"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newValues"
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "PLUS"
                                                        left(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "i"
                                                        right(Type=IntegerLiteralExpr): 
                                                            value: "1"
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "MINUS"
                                                        left(Type=BinaryExpr): 
                                                            operator: "MINUS"
                                                            left(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "length"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "newValues"
                                                            right(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                        right(Type=IntegerLiteralExpr): 
                                                            value: "1"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=ObjectCreationExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Partial"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "newTypes"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "newValues"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "iChronology"
                                                        name(Type=SimpleName): 
                                                            identifier: "newPartial"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Partial"
                                            comment(Type=LineComment): 
                                                content: " this isn't overly efficient, but is safe"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "validate"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "iChronology"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newPartial"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newValues"
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "newPartial"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "value"
                                    right(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "getValue"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "index"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=ThisExpr): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getValues"
                                            name(Type=SimpleName): 
                                                identifier: "newValues"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=PrimitiveType): 
                                                    type: "INT"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "newValues"
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "set"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getField"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "index"
                                        arguments: 
                                            - argument(Type=ThisExpr): 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "index"
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "newValues"
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "value"
                            - statement(Type=ReturnStmt): 
                                expression(Type=ObjectCreationExpr): 
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Partial"
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "newValues"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Partial"
                    name(Type=SimpleName): 
                        identifier: "with"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "fieldType"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "DateTimeFieldType"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "value"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "indexOf"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "fieldType"
                                            name(Type=SimpleName): 
                                                identifier: "index"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "NOT_EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "index"
                                    right(Type=UnaryExpr): 
                                        operator: "MINUS"
                                        expression(Type=IntegerLiteralExpr): 
                                            value: "1"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=ArrayCreationExpr): 
                                                            elementType(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "DateTimeFieldType"
                                                            levels: 
                                                                - level(Type=ArrayCreationLevel): 
                                                                    dimension(Type=BinaryExpr): 
                                                                        operator: "MINUS"
                                                                        left(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "size"
                                                                        right(Type=IntegerLiteralExpr): 
                                                                            value: "1"
                                                        name(Type=SimpleName): 
                                                            identifier: "newTypes"
                                                        type(Type=ArrayType): 
                                                            origin: "TYPE"
                                                            componentType(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "DateTimeFieldType"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=ArrayCreationExpr): 
                                                            elementType(Type=PrimitiveType): 
                                                                type: "INT"
                                                            levels: 
                                                                - level(Type=ArrayCreationLevel): 
                                                                    dimension(Type=BinaryExpr): 
                                                                        operator: "MINUS"
                                                                        left(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "size"
                                                                        right(Type=IntegerLiteralExpr): 
                                                                            value: "1"
                                                        name(Type=SimpleName): 
                                                            identifier: "newValues"
                                                        type(Type=ArrayType): 
                                                            origin: "TYPE"
                                                            componentType(Type=PrimitiveType): 
                                                                type: "INT"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "arraycopy"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "System"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iTypes"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newTypes"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "index"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "arraycopy"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "System"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iTypes"
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "PLUS"
                                                        left(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "index"
                                                        right(Type=IntegerLiteralExpr): 
                                                            value: "1"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newTypes"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "index"
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "MINUS"
                                                        left(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "length"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "newTypes"
                                                        right(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "index"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "arraycopy"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "System"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iValues"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newValues"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "index"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "arraycopy"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "System"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iValues"
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "PLUS"
                                                        left(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "index"
                                                        right(Type=IntegerLiteralExpr): 
                                                            value: "1"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newValues"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "index"
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "MINUS"
                                                        left(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "length"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "newValues"
                                                        right(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "index"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=ObjectCreationExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Partial"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "iChronology"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "newTypes"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "newValues"
                                                        name(Type=SimpleName): 
                                                            identifier: "newPartial"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Partial"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "validate"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "iChronology"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newPartial"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newValues"
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "newPartial"
                            - statement(Type=ReturnStmt): 
                                expression(Type=ThisExpr): 
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Partial"
                    name(Type=SimpleName): 
                        identifier: "without"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets a copy of this date with the specified field removed.\n     * <p>\n     * If this partial did not previously support the field, no error occurs.\n     *\n     * @param fieldType  the field type to remove, may be null\n     * @return a copy of this instance with the field removed\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "fieldType"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "DateTimeFieldType"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "indexOfSupported"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "fieldType"
                                            name(Type=SimpleName): 
                                                identifier: "index"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "value"
                                    right(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "getValue"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "index"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=ThisExpr): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getValues"
                                            name(Type=SimpleName): 
                                                identifier: "newValues"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=PrimitiveType): 
                                                    type: "INT"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "newValues"
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "set"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getField"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "index"
                                        arguments: 
                                            - argument(Type=ThisExpr): 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "index"
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "newValues"
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "value"
                            - statement(Type=ReturnStmt): 
                                expression(Type=ObjectCreationExpr): 
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Partial"
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "newValues"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Partial"
                    name(Type=SimpleName): 
                        identifier: "withField"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets a copy of this Partial with the specified field set to a new value.\n     * <p>\n     * If this partial does not support the field, an exception is thrown.\n     * Contrast this behaviour with {@link #with(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed in the returned instance if supported.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "fieldType"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "DateTimeFieldType"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "value"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "indexOfSupported"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "fieldType"
                                            name(Type=SimpleName): 
                                                identifier: "index"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "amount"
                                    right(Type=IntegerLiteralExpr): 
                                        value: "0"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=ThisExpr): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getValues"
                                            name(Type=SimpleName): 
                                                identifier: "newValues"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=PrimitiveType): 
                                                    type: "INT"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "newValues"
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "add"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getField"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "index"
                                        arguments: 
                                            - argument(Type=ThisExpr): 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "index"
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "newValues"
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "amount"
                            - statement(Type=ReturnStmt): 
                                expression(Type=ObjectCreationExpr): 
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Partial"
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "newValues"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Partial"
                    name(Type=SimpleName): 
                        identifier: "withFieldAdded"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets a copy of this Partial with the value of the specified field increased.\n     * If this partial does not support the field, an exception is thrown.\n     * <p>\n     * If the addition is zero, then <code>this</code> is returned.\n     * The addition will overflow into larger fields (eg. minute to hour).\n     * However, it will not wrap around if the top maximum is reached.\n     *\n     * @param fieldType  the field type to add to, not null\n     * @param amount  the amount to add\n     * @return a copy of this instance with the field updated\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the new datetime exceeds the capacity\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "fieldType"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "DurationFieldType"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "amount"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "indexOfSupported"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "fieldType"
                                            name(Type=SimpleName): 
                                                identifier: "index"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "amount"
                                    right(Type=IntegerLiteralExpr): 
                                        value: "0"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=ThisExpr): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getValues"
                                            name(Type=SimpleName): 
                                                identifier: "newValues"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=PrimitiveType): 
                                                    type: "INT"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "newValues"
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "addWrapPartial"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getField"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "index"
                                        arguments: 
                                            - argument(Type=ThisExpr): 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "index"
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "newValues"
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "amount"
                            - statement(Type=ReturnStmt): 
                                expression(Type=ObjectCreationExpr): 
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Partial"
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "newValues"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Partial"
                    name(Type=SimpleName): 
                        identifier: "withFieldAddWrapped"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets a copy of this Partial with the value of the specified field increased.\n     * If this partial does not support the field, an exception is thrown.\n     * <p>\n     * If the addition is zero, then <code>this</code> is returned.\n     * The addition will overflow into larger fields (eg. minute to hour).\n     * If the maximum is reached, the addition will wra.\n     *\n     * @param fieldType  the field type to add to, not null\n     * @param amount  the amount to add\n     * @return a copy of this instance with the field updated\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the new datetime exceeds the capacity\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "fieldType"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "DurationFieldType"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "amount"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "OR"
                                    left(Type=BinaryExpr): 
                                        operator: "EQUALS"
                                        left(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "period"
                                        right(Type=NullLiteralExpr): 
                                    right(Type=BinaryExpr): 
                                        operator: "EQUALS"
                                        left(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "scalar"
                                        right(Type=IntegerLiteralExpr): 
                                            value: "0"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=ThisExpr): 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getValues"
                                            name(Type=SimpleName): 
                                                identifier: "newValues"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=PrimitiveType): 
                                                    type: "INT"
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "getFieldType"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "period"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "i"
                                                        name(Type=SimpleName): 
                                                            identifier: "fieldType"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "DurationFieldType"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "indexOf"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "fieldType"
                                                        name(Type=SimpleName): 
                                                            identifier: "index"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "GREATER_EQUALS"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "index"
                                                right(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=AssignExpr): 
                                                            operator: "ASSIGN"
                                                            target(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "newValues"
                                                            value(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "add"
                                                                scope(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "getField"
                                                                    arguments: 
                                                                        - argument(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "index"
                                                                arguments: 
                                                                    - argument(Type=ThisExpr): 
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "index"
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "newValues"
                                                                    - argument(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "safeMultiply"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "FieldUtils"
                                                                        arguments: 
                                                                            - argument(Type=MethodCallExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "getValue"
                                                                                scope(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "period"
                                                                                arguments: 
                                                                                    - argument(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "i"
                                                                            - argument(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "scalar"
                                compare(Type=BinaryExpr): 
                                    operator: "LESS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i"
                                    right(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "size"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "period"
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                                type(Type=PrimitiveType): 
                                                    type: "INT"
                                update: 
                                    - update(Type=UnaryExpr): 
                                        operator: "POSTFIX_INCREMENT"
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                            - statement(Type=ReturnStmt): 
                                expression(Type=ObjectCreationExpr): 
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Partial"
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "newValues"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Partial"
                    name(Type=SimpleName): 
                        identifier: "withPeriodAdded"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets a copy of this Partial with the specified period added.\n     * <p>\n     * If the addition is zero, then <code>this</code> is returned.\n     * Fields in the period that aren't present in the partial are ignored.\n     * <p>\n     * This method is typically used to add multiple copies of complex\n     * period instances. Adding one field is best achieved using the method\n     * {@link #withFieldAdded(DurationFieldType, int)}.\n     * \n     * @param period  the period to add to this one, null means zero\n     * @param scalar  the amount of times to add, such as -1 to subtract once\n     * @return a copy of this instance with the period added\n     * @throws ArithmeticException if the new datetime exceeds the capacity\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "period"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ReadablePeriod"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "scalar"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "withPeriodAdded"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "period"
                                        - argument(Type=IntegerLiteralExpr): 
                                            value: "1"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Partial"
                    name(Type=SimpleName): 
                        identifier: "plus"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets a copy of this instance with the specified period added.\n     * <p>\n     * If the amount is zero or null, then <code>this</code> is returned.\n     *\n     * @param period  the duration to add to this one, null means zero\n     * @return a copy of this instance with the period added\n     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "period"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ReadablePeriod"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "withPeriodAdded"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "period"
                                        - argument(Type=UnaryExpr): 
                                            operator: "MINUS"
                                            expression(Type=IntegerLiteralExpr): 
                                                value: "1"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Partial"
                    name(Type=SimpleName): 
                        identifier: "minus"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets a copy of this instance with the specified period take away.\n     * <p>\n     * If the amount is zero or null, then <code>this</code> is returned.\n     *\n     * @param period  the period to reduce this instant by\n     * @return a copy of this instance with the period taken away\n     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "period"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ReadablePeriod"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=ObjectCreationExpr): 
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Property"
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                                        - argument(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "indexOfSupported"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "type"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Property"
                    name(Type=SimpleName): 
                        identifier: "property"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets the property object for the specified type, which contains\n     * many useful methods for getting and manipulating the partial.\n     * <p>\n     * See also {@link ReadablePartial#get(DateTimeFieldType)}.\n     *\n     * @param type  the field type to get the property for, not null\n     * @return the property object\n     * @throws IllegalArgumentException if the field is null or unsupported\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "type"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "DateTimeFieldType"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getInstantMillis"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "DateTimeUtils"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "instant"
                                            name(Type=SimpleName): 
                                                identifier: "millis"
                                            type(Type=PrimitiveType): 
                                                type: "LONG"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getInstantChronology"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "DateTimeUtils"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "instant"
                                            name(Type=SimpleName): 
                                                identifier: "chrono"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Chronology"
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "get"
                                                            scope(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "getField"
                                                                scope(Type=ArrayAccessExpr): 
                                                                    index(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "i"
                                                                    name(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "iTypes"
                                                                arguments: 
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "chrono"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "millis"
                                                        name(Type=SimpleName): 
                                                            identifier: "value"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "NOT_EQUALS"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "value"
                                                right(Type=ArrayAccessExpr): 
                                                    index(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    name(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iValues"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ReturnStmt): 
                                                        expression(Type=BooleanLiteralExpr): 
                                                            value: "false"
                                compare(Type=BinaryExpr): 
                                    operator: "LESS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i"
                                    right(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "length"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "iTypes"
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                                type(Type=PrimitiveType): 
                                                    type: "INT"
                                update: 
                                    - update(Type=UnaryExpr): 
                                        operator: "POSTFIX_INCREMENT"
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                            - statement(Type=ReturnStmt): 
                                expression(Type=BooleanLiteralExpr): 
                                    value: "true"
                    type(Type=PrimitiveType): 
                        type: "BOOLEAN"
                    name(Type=SimpleName): 
                        identifier: "isMatch"
                    comment(Type=JavadocComment): 
                        content: "\n     * Does this partial match the specified instant.\n     * <p>\n     * A match occurs when all the fields of this partial are the same as the\n     * corresponding fields on the specified instant.\n     *\n     * @param instant  an instant to check against, null means now in default zone\n     * @return true if this partial matches the specified instant\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "instant"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ReadableInstant"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "partial"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ThrowStmt): 
                                            expression(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "IllegalArgumentException"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "The partial must not be null"
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "get"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "partial"
                                                            arguments: 
                                                                - argument(Type=ArrayAccessExpr): 
                                                                    index(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "i"
                                                                    name(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "iTypes"
                                                        name(Type=SimpleName): 
                                                            identifier: "value"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "NOT_EQUALS"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "value"
                                                right(Type=ArrayAccessExpr): 
                                                    index(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    name(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iValues"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ReturnStmt): 
                                                        expression(Type=BooleanLiteralExpr): 
                                                            value: "false"
                                compare(Type=BinaryExpr): 
                                    operator: "LESS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i"
                                    right(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "length"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "iTypes"
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                                type(Type=PrimitiveType): 
                                                    type: "INT"
                                update: 
                                    - update(Type=UnaryExpr): 
                                        operator: "POSTFIX_INCREMENT"
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                            - statement(Type=ReturnStmt): 
                                expression(Type=BooleanLiteralExpr): 
                                    value: "true"
                    type(Type=PrimitiveType): 
                        type: "BOOLEAN"
                    name(Type=SimpleName): 
                        identifier: "isMatch"
                    comment(Type=JavadocComment): 
                        content: "\n     * Does this partial match the specified partial.\n     * <p>\n     * A match occurs when all the fields of this partial are the same as the\n     * corresponding fields on the specified partial.\n     *\n     * @param partial  a partial to check against, must not be null\n     * @return true if this partial matches the specified partial\n     * @throws IllegalArgumentException if the partial is null\n     * @throws IllegalArgumentException if the fields of the two partials do not match\n     * @since 1.5\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "partial"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ReadablePartial"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "iFormatter"
                                            name(Type=SimpleName): 
                                                identifier: "f"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "DateTimeFormatter"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "f"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "EQUALS"
                                                left(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                right(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ReturnStmt): 
                                                        expression(Type=NullLiteralExpr): 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "f"
                                                value(Type=ArrayCreationExpr): 
                                                    elementType(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "DateTimeFormatter"
                                                    levels: 
                                                        - level(Type=ArrayCreationLevel): 
                                                            dimension(Type=IntegerLiteralExpr): 
                                                                value: "2"
                                        - statement(Type=TryStmt): 
                                            tryBlock(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=VariableDeclarationExpr): 
                                                            variables: 
                                                                - variable(Type=VariableDeclarator): 
                                                                    initializer(Type=ObjectCreationExpr): 
                                                                        type(Type=ClassOrInterfaceType): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "ArrayList"
                                                                            typeArguments: 
                                                                                - typeArgument(Type=ClassOrInterfaceType): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "DateTimeFieldType"
                                                                        arguments: 
                                                                            - argument(Type=MethodCallExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "asList"
                                                                                scope(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "Arrays"
                                                                                arguments: 
                                                                                    - argument(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "iTypes"
                                                                    name(Type=SimpleName): 
                                                                        identifier: "list"
                                                                    type(Type=ClassOrInterfaceType): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "List"
                                                                        typeArguments: 
                                                                            - typeArgument(Type=ClassOrInterfaceType): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "DateTimeFieldType"
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=AssignExpr): 
                                                            operator: "ASSIGN"
                                                            target(Type=ArrayAccessExpr): 
                                                                index(Type=IntegerLiteralExpr): 
                                                                    value: "0"
                                                                name(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "f"
                                                            value(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "forFields"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "ISODateTimeFormat"
                                                                arguments: 
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "list"
                                                                    - argument(Type=BooleanLiteralExpr): 
                                                                        value: "true"
                                                                    - argument(Type=BooleanLiteralExpr): 
                                                                        value: "false"
                                                    - statement(Type=IfStmt): 
                                                        condition(Type=BinaryExpr): 
                                                            operator: "EQUALS"
                                                            left(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "size"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "list"
                                                            right(Type=IntegerLiteralExpr): 
                                                                value: "0"
                                                        thenStmt(Type=BlockStmt): 
                                                            statements: 
                                                                - statement(Type=ExpressionStmt): 
                                                                    expression(Type=AssignExpr): 
                                                                        operator: "ASSIGN"
                                                                        target(Type=ArrayAccessExpr): 
                                                                            index(Type=IntegerLiteralExpr): 
                                                                                value: "1"
                                                                            name(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "f"
                                                                        value(Type=ArrayAccessExpr): 
                                                                            index(Type=IntegerLiteralExpr): 
                                                                                value: "0"
                                                                            name(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "f"
                                            catchClauses: 
                                                - catchClause(Type=CatchClause): 
                                                    body(Type=BlockStmt): 
                                                    parameter(Type=Parameter): 
                                                        isVarArgs: "false"
                                                        name(Type=SimpleName): 
                                                            identifier: "ex"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "IllegalArgumentException"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "iFormatter"
                                                value(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "f"
                            - statement(Type=ReturnStmt): 
                                expression(Type=ArrayAccessExpr): 
                                    index(Type=IntegerLiteralExpr): 
                                        value: "0"
                                    name(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "f"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "DateTimeFormatter"
                    name(Type=SimpleName): 
                        identifier: "getFormatter"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets a formatter suitable for the fields in this partial.\n     * <p>\n     * If there is no appropriate ISO format, null is returned.\n     * This method may return a formatter that does not display all the\n     * fields of the partial. This might occur when you have overlapping\n     * fields, such as dayOfWeek and dayOfMonth.\n     *\n     * @return a formatter suitable for the fields in this partial, null\n     *  if none is suitable\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "iFormatter"
                                            name(Type=SimpleName): 
                                                identifier: "f"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "DateTimeFormatter"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "f"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getFormatter"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "f"
                                                value(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "iFormatter"
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "EQUALS"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "f"
                                                right(Type=NullLiteralExpr): 
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ReturnStmt): 
                                                        expression(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "toStringList"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ArrayAccessExpr): 
                                                index(Type=IntegerLiteralExpr): 
                                                    value: "1"
                                                name(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "f"
                                            name(Type=SimpleName): 
                                                identifier: "f1"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "DateTimeFormatter"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "f1"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "toStringList"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "print"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "f1"
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "String"
                    name(Type=SimpleName): 
                        identifier: "toString"
                    comment(Type=JavadocComment): 
                        content: "\n     * Output the date in an appropriate ISO8601 format.\n     * <p>\n     * This method will output the partial in one of two ways.\n     * If {@link #getFormatter()}\n     * <p>\n     * If there is no appropriate ISO format a dump of the fields is output\n     * via {@link #toStringList()}.\n     * \n     * @return ISO8601 formatted string\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "size"
                                            name(Type=SimpleName): 
                                                identifier: "size"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "StringBuilder"
                                                arguments: 
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "MULTIPLY"
                                                        left(Type=IntegerLiteralExpr): 
                                                            value: "20"
                                                        right(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "size"
                                            name(Type=SimpleName): 
                                                identifier: "buf"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "StringBuilder"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "append"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "buf"
                                    arguments: 
                                        - argument(Type=CharLiteralExpr): 
                                            value: "["
                            - statement(Type=ForStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "GREATER"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                                                right(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "append"
                                                            scope(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "append"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "buf"
                                                                arguments: 
                                                                    - argument(Type=CharLiteralExpr): 
                                                                        value: ","
                                                            arguments: 
                                                                - argument(Type=CharLiteralExpr): 
                                                                    value: " "
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "append"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "buf"
                                                arguments: 
                                                    - argument(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getName"
                                                        scope(Type=ArrayAccessExpr): 
                                                            index(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                            name(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "iTypes"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "append"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "buf"
                                                arguments: 
                                                    - argument(Type=CharLiteralExpr): 
                                                        value: "="
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "append"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "buf"
                                                arguments: 
                                                    - argument(Type=ArrayAccessExpr): 
                                                        index(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "i"
                                                        name(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "iValues"
                                compare(Type=BinaryExpr): 
                                    operator: "LESS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "i"
                                    right(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "size"
                                initialization: 
                                    - initialization(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=IntegerLiteralExpr): 
                                                    value: "0"
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                                type(Type=PrimitiveType): 
                                                    type: "INT"
                                update: 
                                    - update(Type=UnaryExpr): 
                                        operator: "POSTFIX_INCREMENT"
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "i"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "append"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "buf"
                                    arguments: 
                                        - argument(Type=CharLiteralExpr): 
                                            value: "]"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "toString"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "buf"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "String"
                    name(Type=SimpleName): 
                        identifier: "toStringList"
                    comment(Type=JavadocComment): 
                        content: "\n     * Gets a string version of the partial that lists all the fields.\n     * <p>\n     * This method exists to provide a better debugging toString than\n     * the standard toString. This method lists all the fields and their\n     * values in a style similar to the collections framework.\n     *\n     * @return a toString format that lists all the fields\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "pattern"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "toString"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "print"
                                    scope(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "forPattern"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "DateTimeFormat"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "pattern"
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "String"
                    name(Type=SimpleName): 
                        identifier: "toString"
                    comment(Type=JavadocComment): 
                        content: "\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use <code>toString</code>\n     * @see org.joda.time.format.DateTimeFormat\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "pattern"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "pattern"
                                    right(Type=NullLiteralExpr): 
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "toString"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "print"
                                    scope(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "withLocale"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "forPattern"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "DateTimeFormat"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "pattern"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "locale"
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "String"
                    name(Type=SimpleName): 
                        identifier: "toString"
                    comment(Type=JavadocComment): 
                        content: "\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use <code>toString</code>\n     * @param locale  Locale to use, null means default\n     * @see org.joda.time.format.DateTimeFormat\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "pattern"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "locale"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Locale"
                - member(Type=ClassOrInterfaceDeclaration): 
                    isInterface: "false"
                    name(Type=SimpleName): 
                        identifier: "Property"
                    comment(Type=JavadocComment): 
                        content: "\n     * The property class for <code>Partial</code>.\n     * <p>\n     * This class binds a <code>Partial</code> to a <code>DateTimeField</code>.\n     * \n     * @author Stephen Colebourne\n     * @since 1.1\n     "
                    extendedTypes: 
                        - extendedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "AbstractPartialFieldProperty"
                    implementedTypes: 
                        - implementedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "Serializable"
                    members: 
                        - member(Type=FieldDeclaration): 
                            comment(Type=JavadocComment): 
                                content: " Serialization version "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "STATIC"
                                - modifier(Type=Modifier): 
                                    keyword: "FINAL"
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    initializer(Type=LongLiteralExpr): 
                                        value: "53278362873888L"
                                    name(Type=SimpleName): 
                                        identifier: "serialVersionUID"
                                    type(Type=PrimitiveType): 
                                        type: "LONG"
                        - member(Type=FieldDeclaration): 
                            comment(Type=JavadocComment): 
                                content: " The partial "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "FINAL"
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    name(Type=SimpleName): 
                                        identifier: "iPartial"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Partial"
                        - member(Type=FieldDeclaration): 
                            comment(Type=JavadocComment): 
                                content: " The field index "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "FINAL"
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    name(Type=SimpleName): 
                                        identifier: "iFieldIndex"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=ConstructorDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExplicitConstructorInvocationStmt): 
                                        isThis: "false"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "iPartial"
                                            value(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "partial"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "iFieldIndex"
                                            value(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "fieldIndex"
                            name(Type=SimpleName): 
                                identifier: "Property"
                            comment(Type=JavadocComment): 
                                content: "\n         * Constructs a property.\n         * \n         * @param partial  the partial instance\n         * @param fieldIndex  the index in the partial\n         "
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "partial"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Partial"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "fieldIndex"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getField"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "iPartial"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "iFieldIndex"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "DateTimeField"
                            name(Type=SimpleName): 
                                identifier: "getField"
                            comment(Type=JavadocComment): 
                                content: "\n         * Gets the field that this property uses.\n         * \n         * @return the field\n         "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "iPartial"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ReadablePartial"
                            name(Type=SimpleName): 
                                identifier: "getReadablePartial"
                            comment(Type=JavadocComment): 
                                content: "\n         * Gets the partial that this property belongs to.\n         * \n         * @return the partial\n         "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PROTECTED"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "iPartial"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Partial"
                            name(Type=SimpleName): 
                                identifier: "getPartial"
                            comment(Type=JavadocComment): 
                                content: "\n         * Gets the partial that this property belongs to.\n         * \n         * @return the partial\n         "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getValue"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "iPartial"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "iFieldIndex"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "get"
                            comment(Type=JavadocComment): 
                                content: "\n         * Gets the value of this field.\n         * \n         * @return the field value\n         "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getValues"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "iPartial"
                                                    name(Type=SimpleName): 
                                                        identifier: "newValues"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=PrimitiveType): 
                                                            type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "newValues"
                                            value(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "add"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getField"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iPartial"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iFieldIndex"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newValues"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "valueToAdd"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Partial"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "iPartial"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "newValues"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Partial"
                            name(Type=SimpleName): 
                                identifier: "addToCopy"
                            comment(Type=JavadocComment): 
                                content: "\n         * Adds to the value of this field in a copy of this Partial.\n         * <p>\n         * The value will be added to this field. If the value is too large to be\n         * added solely to this field then it will affect larger fields.\n         * Smaller fields are unaffected.\n         * <p>\n         * If the result would be too large, beyond the maximum year, then an\n         * IllegalArgumentException is thrown.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param valueToAdd  the value to add to the field in the copy\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the value isn't valid\n         "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "valueToAdd"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getValues"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "iPartial"
                                                    name(Type=SimpleName): 
                                                        identifier: "newValues"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=PrimitiveType): 
                                                            type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "newValues"
                                            value(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "addWrapField"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getField"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iPartial"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iFieldIndex"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newValues"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "valueToAdd"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Partial"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "iPartial"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "newValues"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Partial"
                            name(Type=SimpleName): 
                                identifier: "addWrapFieldToCopy"
                            comment(Type=JavadocComment): 
                                content: "\n         * Adds to the value of this field in a copy of this Partial wrapping\n         * within this field if the maximum value is reached.\n         * <p>\n         * The value will be added to this field. If the value is too large to be\n         * added solely to this field then it wraps within this field.\n         * Other fields are unaffected.\n         * <p>\n         * For example,\n         * <code>2004-12-20</code> addWrapField one month returns <code>2004-01-20</code>.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param valueToAdd  the value to add to the field in the copy\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the value isn't valid\n         "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "valueToAdd"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getValues"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "iPartial"
                                                    name(Type=SimpleName): 
                                                        identifier: "newValues"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=PrimitiveType): 
                                                            type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "newValues"
                                            value(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "set"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getField"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iPartial"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "iFieldIndex"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "newValues"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "value"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Partial"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "iPartial"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "newValues"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Partial"
                            name(Type=SimpleName): 
                                identifier: "setCopy"
                            comment(Type=JavadocComment): 
                                content: "\n         * Sets this field in a copy of the Partial.\n         * <p>\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param value  the value to set the field in the copy to\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the value isn't valid\n         "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "value"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getValues"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "iPartial"
                                                    name(Type=SimpleName): 
                                                        identifier: "newValues"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                             