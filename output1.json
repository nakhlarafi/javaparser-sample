{
  "root(Type\u003dCompilationUnit)": {
    "packageDeclaration(Type\u003dPackageDeclaration)": {
      "name(Type\u003dName)": {
        "identifier": "time",
        "qualifier(Type\u003dName)": {
          "identifier": "joda",
          "qualifier(Type\u003dName)": {
            "identifier": "org"
          }
        }
      }
    },
    "comment(Type\u003dBlockComment)": {
      "content": "\n *  Copyright 2001-2013 Stephen Colebourne\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n "
    },
    "imports": [
      {
        "import(Type\u003dImportDeclaration)": {
          "isAsterisk": "false",
          "isStatic": "false",
          "name(Type\u003dName)": {
            "identifier": "Serializable",
            "qualifier(Type\u003dName)": {
              "identifier": "io",
              "qualifier(Type\u003dName)": {
                "identifier": "java"
              }
            }
          }
        }
      },
      {
        "import(Type\u003dImportDeclaration)": {
          "isAsterisk": "false",
          "isStatic": "false",
          "name(Type\u003dName)": {
            "identifier": "ArrayList",
            "qualifier(Type\u003dName)": {
              "identifier": "util",
              "qualifier(Type\u003dName)": {
                "identifier": "java"
              }
            }
          }
        }
      },
      {
        "import(Type\u003dImportDeclaration)": {
          "isAsterisk": "false",
          "isStatic": "false",
          "name(Type\u003dName)": {
            "identifier": "Arrays",
            "qualifier(Type\u003dName)": {
              "identifier": "util",
              "qualifier(Type\u003dName)": {
                "identifier": "java"
              }
            }
          }
        }
      },
      {
        "import(Type\u003dImportDeclaration)": {
          "isAsterisk": "false",
          "isStatic": "false",
          "name(Type\u003dName)": {
            "identifier": "List",
            "qualifier(Type\u003dName)": {
              "identifier": "util",
              "qualifier(Type\u003dName)": {
                "identifier": "java"
              }
            }
          }
        }
      },
      {
        "import(Type\u003dImportDeclaration)": {
          "isAsterisk": "false",
          "isStatic": "false",
          "name(Type\u003dName)": {
            "identifier": "Locale",
            "qualifier(Type\u003dName)": {
              "identifier": "util",
              "qualifier(Type\u003dName)": {
                "identifier": "java"
              }
            }
          }
        }
      },
      {
        "import(Type\u003dImportDeclaration)": {
          "isAsterisk": "false",
          "isStatic": "false",
          "name(Type\u003dName)": {
            "identifier": "AbstractPartial",
            "qualifier(Type\u003dName)": {
              "identifier": "base",
              "qualifier(Type\u003dName)": {
                "identifier": "time",
                "qualifier(Type\u003dName)": {
                  "identifier": "joda",
                  "qualifier(Type\u003dName)": {
                    "identifier": "org"
                  }
                }
              }
            }
          }
        }
      },
      {
        "import(Type\u003dImportDeclaration)": {
          "isAsterisk": "false",
          "isStatic": "false",
          "name(Type\u003dName)": {
            "identifier": "AbstractPartialFieldProperty",
            "qualifier(Type\u003dName)": {
              "identifier": "field",
              "qualifier(Type\u003dName)": {
                "identifier": "time",
                "qualifier(Type\u003dName)": {
                  "identifier": "joda",
                  "qualifier(Type\u003dName)": {
                    "identifier": "org"
                  }
                }
              }
            }
          }
        }
      },
      {
        "import(Type\u003dImportDeclaration)": {
          "isAsterisk": "false",
          "isStatic": "false",
          "name(Type\u003dName)": {
            "identifier": "FieldUtils",
            "qualifier(Type\u003dName)": {
              "identifier": "field",
              "qualifier(Type\u003dName)": {
                "identifier": "time",
                "qualifier(Type\u003dName)": {
                  "identifier": "joda",
                  "qualifier(Type\u003dName)": {
                    "identifier": "org"
                  }
                }
              }
            }
          }
        }
      },
      {
        "import(Type\u003dImportDeclaration)": {
          "isAsterisk": "false",
          "isStatic": "false",
          "name(Type\u003dName)": {
            "identifier": "DateTimeFormat",
            "qualifier(Type\u003dName)": {
              "identifier": "format",
              "qualifier(Type\u003dName)": {
                "identifier": "time",
                "qualifier(Type\u003dName)": {
                  "identifier": "joda",
                  "qualifier(Type\u003dName)": {
                    "identifier": "org"
                  }
                }
              }
            }
          }
        }
      },
      {
        "import(Type\u003dImportDeclaration)": {
          "isAsterisk": "false",
          "isStatic": "false",
          "name(Type\u003dName)": {
            "identifier": "DateTimeFormatter",
            "qualifier(Type\u003dName)": {
              "identifier": "format",
              "qualifier(Type\u003dName)": {
                "identifier": "time",
                "qualifier(Type\u003dName)": {
                  "identifier": "joda",
                  "qualifier(Type\u003dName)": {
                    "identifier": "org"
                  }
                }
              }
            }
          }
        }
      },
      {
        "import(Type\u003dImportDeclaration)": {
          "isAsterisk": "false",
          "isStatic": "false",
          "name(Type\u003dName)": {
            "identifier": "ISODateTimeFormat",
            "qualifier(Type\u003dName)": {
              "identifier": "format",
              "qualifier(Type\u003dName)": {
                "identifier": "time",
                "qualifier(Type\u003dName)": {
                  "identifier": "joda",
                  "qualifier(Type\u003dName)": {
                    "identifier": "org"
                  }
                }
              }
            }
          }
        }
      }
    ],
    "types": [
      {
        "type(Type\u003dClassOrInterfaceDeclaration)": {
          "isInterface": "false",
          "name(Type\u003dSimpleName)": {
            "identifier": "Partial"
          },
          "comment(Type\u003dJavadocComment)": {
            "content": "\n * Partial is an immutable partial datetime supporting any set of datetime fields.\n * \u003cp\u003e\n * A Partial instance can be used to hold any combination of fields.\n * The instance does not contain a time zone, so any datetime is local.\n * \u003cp\u003e\n * A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.\n * This method compares each field on this partial with those of the instant\n * and determines if the partial matches the instant.\n * Given this definition, an empty Partial instance represents any datetime\n * and always matches.\n * \u003cp\u003e\n * Calculations on Partial are performed using a {@link Chronology}.\n * This chronology is set to be in the UTC time zone for all calculations.\n * \u003cp\u003e\n * Each individual field can be queried in two ways:\n * \u003cul\u003e\n * \u003cli\u003e\u003ccode\u003eget(DateTimeFieldType.monthOfYear())\u003c/code\u003e\n * \u003cli\u003e\u003ccode\u003eproperty(DateTimeFieldType.monthOfYear()).get()\u003c/code\u003e\n * \u003c/ul\u003e\n * The second technique also provides access to other useful methods on the\n * field:\n * \u003cul\u003e\n * \u003cli\u003enumeric value - \u003ccode\u003emonthOfYear().get()\u003c/code\u003e\n * \u003cli\u003etext value - \u003ccode\u003emonthOfYear().getAsText()\u003c/code\u003e\n * \u003cli\u003eshort text value - \u003ccode\u003emonthOfYear().getAsShortText()\u003c/code\u003e\n * \u003cli\u003emaximum/minimum values - \u003ccode\u003emonthOfYear().getMaximumValue()\u003c/code\u003e\n * \u003cli\u003eadd/subtract - \u003ccode\u003emonthOfYear().addToCopy()\u003c/code\u003e\n * \u003cli\u003eset - \u003ccode\u003emonthOfYear().setCopy()\u003c/code\u003e\n * \u003c/ul\u003e\n * \u003cp\u003e\n * Partial is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.1\n "
          },
          "extendedTypes": [
            {
              "extendedType(Type\u003dClassOrInterfaceType)": {
                "name(Type\u003dSimpleName)": {
                  "identifier": "AbstractPartial"
                }
              }
            }
          ],
          "implementedTypes": [
            {
              "implementedType(Type\u003dClassOrInterfaceType)": {
                "name(Type\u003dSimpleName)": {
                  "identifier": "ReadablePartial"
                }
              }
            },
            {
              "implementedType(Type\u003dClassOrInterfaceType)": {
                "name(Type\u003dSimpleName)": {
                  "identifier": "Serializable"
                }
              }
            }
          ],
          "members": [
            {
              "member(Type\u003dFieldDeclaration)": {
                "comment(Type\u003dJavadocComment)": {
                  "content": " Serialization version "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PRIVATE"
                    }
                  },
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "STATIC"
                    }
                  },
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "FINAL"
                    }
                  }
                ],
                "variables": [
                  {
                    "variable(Type\u003dVariableDeclarator)": {
                      "initializer(Type\u003dLongLiteralExpr)": {
                        "value": "12324121189002L"
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "serialVersionUID"
                      },
                      "type(Type\u003dPrimitiveType)": {
                        "type": "LONG"
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dFieldDeclaration)": {
                "comment(Type\u003dJavadocComment)": {
                  "content": " The chronology in use. "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PRIVATE"
                    }
                  },
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "FINAL"
                    }
                  }
                ],
                "variables": [
                  {
                    "variable(Type\u003dVariableDeclarator)": {
                      "name(Type\u003dSimpleName)": {
                        "identifier": "iChronology"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Chronology"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dFieldDeclaration)": {
                "comment(Type\u003dJavadocComment)": {
                  "content": " The set of field types. "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PRIVATE"
                    }
                  },
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "FINAL"
                    }
                  }
                ],
                "variables": [
                  {
                    "variable(Type\u003dVariableDeclarator)": {
                      "name(Type\u003dSimpleName)": {
                        "identifier": "iTypes"
                      },
                      "type(Type\u003dArrayType)": {
                        "origin": "TYPE",
                        "componentType(Type\u003dClassOrInterfaceType)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "DateTimeFieldType"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dFieldDeclaration)": {
                "comment(Type\u003dJavadocComment)": {
                  "content": " The values of each field in this partial. "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PRIVATE"
                    }
                  },
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "FINAL"
                    }
                  }
                ],
                "variables": [
                  {
                    "variable(Type\u003dVariableDeclarator)": {
                      "name(Type\u003dSimpleName)": {
                        "identifier": "iValues"
                      },
                      "type(Type\u003dArrayType)": {
                        "origin": "TYPE",
                        "componentType(Type\u003dPrimitiveType)": {
                          "type": "INT"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dFieldDeclaration)": {
                "comment(Type\u003dJavadocComment)": {
                  "content": " The formatter to use, [0] may miss some fields, [1] doesn\u0027t miss any fields. "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PRIVATE"
                    }
                  },
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "TRANSIENT"
                    }
                  }
                ],
                "variables": [
                  {
                    "variable(Type\u003dVariableDeclarator)": {
                      "name(Type\u003dSimpleName)": {
                        "identifier": "iFormatter"
                      },
                      "type(Type\u003dArrayType)": {
                        "origin": "TYPE",
                        "componentType(Type\u003dClassOrInterfaceType)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "DateTimeFormatter"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dConstructorDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExplicitConstructorInvocationStmt)": {
                        "isThis": "true",
                        "arguments": [
                          {
                            "argument(Type\u003dCastExpr)": {
                              "type(Type\u003dClassOrInterfaceType)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "Chronology"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "Partial"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Constructs a Partial with no fields or values, which can be considered\n     * to represent any date.\n     * \u003cp\u003e\n     * This is most useful when constructing partials, for example:\n     * \u003cpre\u003e\n     * Partial p \u003d new Partial()\n     *     .with(DateTimeFieldType.dayOfWeek(), 5)\n     *     .with(DateTimeFieldType.hourOfDay(), 12)\n     *     .with(DateTimeFieldType.minuteOfHour(), 20);\n     * \u003c/pre\u003e\n     * Note that, although this is a clean way to write code, it is fairly\n     * inefficient internally.\n     * \u003cp\u003e\n     * The constructor uses the default ISO chronology.\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dConstructorDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExplicitConstructorInvocationStmt)": {
                        "isThis": "false"
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iChronology"
                            }
                          },
                          "value(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "withUTC"
                            },
                            "scope(Type\u003dMethodCallExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "getChronology"
                              },
                              "scope(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "DateTimeUtils"
                                }
                              },
                              "arguments": [
                                {
                                  "argument(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "chrono"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iTypes"
                            }
                          },
                          "value(Type\u003dArrayCreationExpr)": {
                            "elementType(Type\u003dClassOrInterfaceType)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "DateTimeFieldType"
                              }
                            },
                            "levels": [
                              {
                                "level(Type\u003dArrayCreationLevel)": {
                                  "dimension(Type\u003dIntegerLiteralExpr)": {
                                    "value": "0"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iValues"
                            }
                          },
                          "value(Type\u003dArrayCreationExpr)": {
                            "elementType(Type\u003dPrimitiveType)": {
                              "type": "INT"
                            },
                            "levels": [
                              {
                                "level(Type\u003dArrayCreationLevel)": {
                                  "dimension(Type\u003dIntegerLiteralExpr)": {
                                    "value": "0"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "Partial"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Constructs a Partial with no fields or values, which can be considered\n     * to represent any date.\n     * \u003cp\u003e\n     * This is most useful when constructing partials, for example:\n     * \u003cpre\u003e\n     * Partial p \u003d new Partial(chrono)\n     *     .with(DateTimeFieldType.dayOfWeek(), 5)\n     *     .with(DateTimeFieldType.hourOfDay(), 12)\n     *     .with(DateTimeFieldType.minuteOfHour(), 20);\n     * \u003c/pre\u003e\n     * Note that, although this is a clean way to write code, it is fairly\n     * inefficient internally.\n     *\n     * @param chrono  the chronology, null means ISO\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "chrono"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Chronology"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dConstructorDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExplicitConstructorInvocationStmt)": {
                        "isThis": "true",
                        "arguments": [
                          {
                            "argument(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "type"
                              }
                            }
                          },
                          {
                            "argument(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "value"
                              }
                            }
                          },
                          {}
                        ]
                      }
                    }
                  ]
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "Partial"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Constructs a Partial with the specified field and value.\n     * \u003cp\u003e\n     * The constructor uses the default ISO chronology.\n     * \n     * @param type  the single type to create the partial from, not null\n     * @param value  the value to store\n     * @throws IllegalArgumentException if the type or value is invalid\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "type"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "DateTimeFieldType"
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "value"
                      },
                      "type(Type\u003dPrimitiveType)": {
                        "type": "INT"
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dConstructorDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExplicitConstructorInvocationStmt)": {
                        "isThis": "false"
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "chronology"
                            }
                          },
                          "value(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "withUTC"
                            },
                            "scope(Type\u003dMethodCallExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "getChronology"
                              },
                              "scope(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "DateTimeUtils"
                                }
                              },
                              "arguments": [
                                {
                                  "argument(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "chronology"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iChronology"
                            }
                          },
                          "value(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "chronology"
                            }
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "type"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dThrowStmt)": {
                                "expression(Type\u003dObjectCreationExpr)": {
                                  "type(Type\u003dClassOrInterfaceType)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "IllegalArgumentException"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dStringLiteralExpr)": {
                                        "value": "The field type must not be null"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iTypes"
                            }
                          },
                          "value(Type\u003dArrayCreationExpr)": {
                            "elementType(Type\u003dClassOrInterfaceType)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "DateTimeFieldType"
                              }
                            },
                            "initializer(Type\u003dArrayInitializerExpr)": {
                              "values": [
                                {
                                  "value(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "type"
                                    }
                                  }
                                }
                              ]
                            },
                            "levels": [
                              {}
                            ]
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iValues"
                            }
                          },
                          "value(Type\u003dArrayCreationExpr)": {
                            "elementType(Type\u003dPrimitiveType)": {
                              "type": "INT"
                            },
                            "initializer(Type\u003dArrayInitializerExpr)": {
                              "values": [
                                {
                                  "value(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "value"
                                    }
                                  }
                                }
                              ]
                            },
                            "levels": [
                              {}
                            ]
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dMethodCallExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "validate"
                          },
                          "scope(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "chronology"
                            }
                          },
                          "arguments": [
                            {},
                            {
                              "argument(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "iValues"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "Partial"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Constructs a Partial with the specified field and value.\n     * \u003cp\u003e\n     * The constructor uses the specified chronology.\n     * \n     * @param type  the single type to create the partial from, not null\n     * @param value  the value to store\n     * @param chronology  the chronology, null means ISO\n     * @throws IllegalArgumentException if the type or value is invalid\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "type"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "DateTimeFieldType"
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "value"
                      },
                      "type(Type\u003dPrimitiveType)": {
                        "type": "INT"
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "chronology"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Chronology"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dConstructorDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExplicitConstructorInvocationStmt)": {
                        "isThis": "true",
                        "arguments": [
                          {
                            "argument(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "types"
                              }
                            }
                          },
                          {
                            "argument(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "values"
                              }
                            }
                          },
                          {}
                        ]
                      }
                    }
                  ]
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "Partial"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Constructs a Partial with the specified fields and values.\n     * The fields must be specified in the order largest to smallest.\n     * \u003cp\u003e\n     * The constructor uses the specified chronology.\n     * \n     * @param types  the types to create the partial from, not null\n     * @param values  the values to store, not null\n     * @throws IllegalArgumentException if the types or values are invalid\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "types"
                      },
                      "type(Type\u003dArrayType)": {
                        "origin": "TYPE",
                        "componentType(Type\u003dClassOrInterfaceType)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "DateTimeFieldType"
                          }
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "values"
                      },
                      "type(Type\u003dArrayType)": {
                        "origin": "TYPE",
                        "componentType(Type\u003dPrimitiveType)": {
                          "type": "INT"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dConstructorDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExplicitConstructorInvocationStmt)": {
                        "isThis": "false"
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "chronology"
                            }
                          },
                          "value(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "withUTC"
                            },
                            "scope(Type\u003dMethodCallExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "getChronology"
                              },
                              "scope(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "DateTimeUtils"
                                }
                              },
                              "arguments": [
                                {
                                  "argument(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "chronology"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iChronology"
                            }
                          },
                          "value(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "chronology"
                            }
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "types"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dThrowStmt)": {
                                "expression(Type\u003dObjectCreationExpr)": {
                                  "type(Type\u003dClassOrInterfaceType)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "IllegalArgumentException"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dStringLiteralExpr)": {
                                        "value": "Types array must not be null"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "values"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dThrowStmt)": {
                                "expression(Type\u003dObjectCreationExpr)": {
                                  "type(Type\u003dClassOrInterfaceType)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "IllegalArgumentException"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dStringLiteralExpr)": {
                                        "value": "Values array must not be null"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "NOT_EQUALS",
                          "left(Type\u003dFieldAccessExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "length"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "values"
                              }
                            }
                          },
                          "right(Type\u003dFieldAccessExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "length"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "types"
                              }
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dThrowStmt)": {
                                "expression(Type\u003dObjectCreationExpr)": {
                                  "type(Type\u003dClassOrInterfaceType)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "IllegalArgumentException"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dStringLiteralExpr)": {
                                        "value": "Values array must be the same length as the types array"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dFieldAccessExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "length"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "types"
                              }
                            }
                          },
                          "right(Type\u003dIntegerLiteralExpr)": {
                            "value": "0"
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dAssignExpr)": {
                                  "operator": "ASSIGN",
                                  "target(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "iTypes"
                                    }
                                  },
                                  "value(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "types"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dAssignExpr)": {
                                  "operator": "ASSIGN",
                                  "target(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "iValues"
                                    }
                                  },
                                  "value(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "values"
                                    }
                                  }
                                }
                              }
                            },
                            {}
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dForStmt)": {
                        "body(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dIfStmt)": {
                                "condition(Type\u003dBinaryExpr)": {
                                  "operator": "EQUALS",
                                  "left(Type\u003dArrayAccessExpr)": {
                                    "index(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "i"
                                      }
                                    },
                                    "name(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "types"
                                      }
                                    }
                                  }
                                },
                                "thenStmt(Type\u003dBlockStmt)": {
                                  "statements": [
                                    {
                                      "statement(Type\u003dThrowStmt)": {
                                        "expression(Type\u003dObjectCreationExpr)": {
                                          "type(Type\u003dClassOrInterfaceType)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "IllegalArgumentException"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "argument(Type\u003dBinaryExpr)": {
                                                "operator": "PLUS",
                                                "left(Type\u003dStringLiteralExpr)": {
                                                  "value": "Types array must not contain null: index "
                                                },
                                                "right(Type\u003dNameExpr)": {
                                                  "name(Type\u003dSimpleName)": {
                                                    "identifier": "i"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "compare(Type\u003dBinaryExpr)": {
                          "operator": "LESS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "i"
                            }
                          },
                          "right(Type\u003dFieldAccessExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "length"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "types"
                              }
                            }
                          }
                        },
                        "initialization": [
                          {
                            "initialization(Type\u003dVariableDeclarationExpr)": {
                              "variables": [
                                {
                                  "variable(Type\u003dVariableDeclarator)": {
                                    "initializer(Type\u003dIntegerLiteralExpr)": {
                                      "value": "0"
                                    },
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "i"
                                    },
                                    "type(Type\u003dPrimitiveType)": {
                                      "type": "INT"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "update": [
                          {
                            "update(Type\u003dUnaryExpr)": {
                              "operator": "POSTFIX_INCREMENT",
                              "expression(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "i"
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "lastUnitField"
                                },
                                "type(Type\u003dClassOrInterfaceType)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "DurationField"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dForStmt)": {
                        "body(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dArrayAccessExpr)": {
                                          "index(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "i"
                                            }
                                          },
                                          "name(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "types"
                                            }
                                          }
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "loopType"
                                        },
                                        "type(Type\u003dClassOrInterfaceType)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "DateTimeFieldType"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dMethodCallExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "getField"
                                          },
                                          "scope(Type\u003dMethodCallExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "getDurationType"
                                            },
                                            "scope(Type\u003dNameExpr)": {
                                              "name(Type\u003dSimpleName)": {
                                                "identifier": "loopType"
                                              }
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "iChronology"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "loopUnitField"
                                        },
                                        "type(Type\u003dClassOrInterfaceType)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "DurationField"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dIfStmt)": {
                                "condition(Type\u003dBinaryExpr)": {
                                  "operator": "GREATER",
                                  "left(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "i"
                                    }
                                  },
                                  "right(Type\u003dIntegerLiteralExpr)": {
                                    "value": "0"
                                  }
                                },
                                "thenStmt(Type\u003dBlockStmt)": {
                                  "statements": [
                                    {
                                      "statement(Type\u003dExpressionStmt)": {
                                        "expression(Type\u003dVariableDeclarationExpr)": {
                                          "variables": [
                                            {
                                              "variable(Type\u003dVariableDeclarator)": {
                                                "initializer(Type\u003dMethodCallExpr)": {
                                                  "name(Type\u003dSimpleName)": {
                                                    "identifier": "compareTo"
                                                  },
                                                  "scope(Type\u003dNameExpr)": {
                                                    "name(Type\u003dSimpleName)": {
                                                      "identifier": "lastUnitField"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "argument(Type\u003dNameExpr)": {
                                                        "name(Type\u003dSimpleName)": {
                                                          "identifier": "loopUnitField"
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "compare"
                                                },
                                                "type(Type\u003dPrimitiveType)": {
                                                  "type": "INT"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    {
                                      "statement(Type\u003dIfStmt)": {
                                        "condition(Type\u003dBinaryExpr)": {
                                          "operator": "LESS",
                                          "left(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "compare"
                                            }
                                          },
                                          "right(Type\u003dIntegerLiteralExpr)": {
                                            "value": "0"
                                          }
                                        },
                                        "elseStmt(Type\u003dIfStmt)": {
                                          "condition(Type\u003dBinaryExpr)": {
                                            "operator": "EQUALS",
                                            "left(Type\u003dNameExpr)": {
                                              "name(Type\u003dSimpleName)": {
                                                "identifier": "compare"
                                              }
                                            },
                                            "right(Type\u003dIntegerLiteralExpr)": {
                                              "value": "0"
                                            }
                                          },
                                          "thenStmt(Type\u003dBlockStmt)": {
                                            "statements": [
                                              {
                                                "statement(Type\u003dIfStmt)": {
                                                  "condition(Type\u003dBinaryExpr)": {
                                                    "operator": "EQUALS",
                                                    "left(Type\u003dMethodCallExpr)": {
                                                      "name(Type\u003dSimpleName)": {
                                                        "identifier": "getRangeDurationType"
                                                      },
                                                      "scope(Type\u003dArrayAccessExpr)": {
                                                        "index(Type\u003dBinaryExpr)": {
                                                          "operator": "MINUS",
                                                          "left(Type\u003dNameExpr)": {
                                                            "name(Type\u003dSimpleName)": {
                                                              "identifier": "i"
                                                            }
                                                          },
                                                          "right(Type\u003dIntegerLiteralExpr)": {
                                                            "value": "1"
                                                          }
                                                        },
                                                        "name(Type\u003dNameExpr)": {
                                                          "name(Type\u003dSimpleName)": {
                                                            "identifier": "types"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "elseStmt(Type\u003dBlockStmt)": {
                                                    "statements": [
                                                      {
                                                        "statement(Type\u003dIfStmt)": {
                                                          "condition(Type\u003dBinaryExpr)": {
                                                            "operator": "EQUALS",
                                                            "left(Type\u003dMethodCallExpr)": {
                                                              "name(Type\u003dSimpleName)": {
                                                                "identifier": "getRangeDurationType"
                                                              },
                                                              "scope(Type\u003dNameExpr)": {
                                                                "name(Type\u003dSimpleName)": {
                                                                  "identifier": "loopType"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "thenStmt(Type\u003dBlockStmt)": {
                                                            "statements": [
                                                              {
                                                                "statement(Type\u003dThrowStmt)": {
                                                                  "expression(Type\u003dObjectCreationExpr)": {
                                                                    "type(Type\u003dClassOrInterfaceType)": {
                                                                      "name(Type\u003dSimpleName)": {
                                                                        "identifier": "IllegalArgumentException"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "argument(Type\u003dBinaryExpr)": {
                                                                          "operator": "PLUS",
                                                                          "left(Type\u003dBinaryExpr)": {
                                                                            "operator": "PLUS",
                                                                            "left(Type\u003dBinaryExpr)": {
                                                                              "operator": "PLUS",
                                                                              "left(Type\u003dStringLiteralExpr)": {
                                                                                "value": "Types array must be in order largest-smallest: "
                                                                              },
                                                                              "right(Type\u003dMethodCallExpr)": {
                                                                                "name(Type\u003dSimpleName)": {
                                                                                  "identifier": "getName"
                                                                                },
                                                                                "scope(Type\u003dArrayAccessExpr)": {
                                                                                  "index(Type\u003dBinaryExpr)": {
                                                                                    "operator": "MINUS",
                                                                                    "left(Type\u003dNameExpr)": {
                                                                                      "name(Type\u003dSimpleName)": {
                                                                                        "identifier": "i"
                                                                                      }
                                                                                    },
                                                                                    "right(Type\u003dIntegerLiteralExpr)": {
                                                                                      "value": "1"
                                                                                    }
                                                                                  },
                                                                                  "name(Type\u003dNameExpr)": {
                                                                                    "name(Type\u003dSimpleName)": {
                                                                                      "identifier": "types"
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            },
                                                                            "right(Type\u003dStringLiteralExpr)": {
                                                                              "value": " \u003c "
                                                                            }
                                                                          },
                                                                          "right(Type\u003dMethodCallExpr)": {
                                                                            "name(Type\u003dSimpleName)": {
                                                                              "identifier": "getName"
                                                                            },
                                                                            "scope(Type\u003dNameExpr)": {
                                                                              "name(Type\u003dSimpleName)": {
                                                                                "identifier": "loopType"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "statement(Type\u003dExpressionStmt)": {
                                                          "expression(Type\u003dVariableDeclarationExpr)": {
                                                            "variables": [
                                                              {
                                                                "variable(Type\u003dVariableDeclarator)": {
                                                                  "initializer(Type\u003dMethodCallExpr)": {
                                                                    "name(Type\u003dSimpleName)": {
                                                                      "identifier": "getField"
                                                                    },
                                                                    "scope(Type\u003dMethodCallExpr)": {
                                                                      "name(Type\u003dSimpleName)": {
                                                                        "identifier": "getRangeDurationType"
                                                                      },
                                                                      "scope(Type\u003dArrayAccessExpr)": {
                                                                        "index(Type\u003dBinaryExpr)": {
                                                                          "operator": "MINUS",
                                                                          "left(Type\u003dNameExpr)": {
                                                                            "name(Type\u003dSimpleName)": {
                                                                              "identifier": "i"
                                                                            }
                                                                          },
                                                                          "right(Type\u003dIntegerLiteralExpr)": {
                                                                            "value": "1"
                                                                          }
                                                                        },
                                                                        "name(Type\u003dNameExpr)": {
                                                                          "name(Type\u003dSimpleName)": {
                                                                            "identifier": "types"
                                                                          }
                                                                        }
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "argument(Type\u003dNameExpr)": {
                                                                          "name(Type\u003dSimpleName)": {
                                                                            "identifier": "iChronology"
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  },
                                                                  "name(Type\u003dSimpleName)": {
                                                                    "identifier": "lastRangeField"
                                                                  },
                                                                  "type(Type\u003dClassOrInterfaceType)": {
                                                                    "name(Type\u003dSimpleName)": {
                                                                      "identifier": "DurationField"
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "statement(Type\u003dExpressionStmt)": {
                                                          "expression(Type\u003dVariableDeclarationExpr)": {
                                                            "variables": [
                                                              {
                                                                "variable(Type\u003dVariableDeclarator)": {
                                                                  "initializer(Type\u003dMethodCallExpr)": {
                                                                    "name(Type\u003dSimpleName)": {
                                                                      "identifier": "getField"
                                                                    },
                                                                    "scope(Type\u003dMethodCallExpr)": {
                                                                      "name(Type\u003dSimpleName)": {
                                                                        "identifier": "getRangeDurationType"
                                                                      },
                                                                      "scope(Type\u003dNameExpr)": {
                                                                        "name(Type\u003dSimpleName)": {
                                                                          "identifier": "loopType"
                                                                        }
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "argument(Type\u003dNameExpr)": {
                                                                          "name(Type\u003dSimpleName)": {
                                                                            "identifier": "iChronology"
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  },
                                                                  "name(Type\u003dSimpleName)": {
                                                                    "identifier": "loopRangeField"
                                                                  },
                                                                  "type(Type\u003dClassOrInterfaceType)": {
                                                                    "name(Type\u003dSimpleName)": {
                                                                      "identifier": "DurationField"
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "statement(Type\u003dIfStmt)": {
                                                          "condition(Type\u003dBinaryExpr)": {
                                                            "operator": "LESS",
                                                            "left(Type\u003dMethodCallExpr)": {
                                                              "name(Type\u003dSimpleName)": {
                                                                "identifier": "compareTo"
                                                              },
                                                              "scope(Type\u003dNameExpr)": {
                                                                "name(Type\u003dSimpleName)": {
                                                                  "identifier": "lastRangeField"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "argument(Type\u003dNameExpr)": {
                                                                    "name(Type\u003dSimpleName)": {
                                                                      "identifier": "loopRangeField"
                                                                    }
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "right(Type\u003dIntegerLiteralExpr)": {
                                                              "value": "0"
                                                            }
                                                          },
                                                          "thenStmt(Type\u003dBlockStmt)": {
                                                            "statements": [
                                                              {
                                                                "statement(Type\u003dThrowStmt)": {
                                                                  "expression(Type\u003dObjectCreationExpr)": {
                                                                    "type(Type\u003dClassOrInterfaceType)": {
                                                                      "name(Type\u003dSimpleName)": {
                                                                        "identifier": "IllegalArgumentException"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "argument(Type\u003dBinaryExpr)": {
                                                                          "operator": "PLUS",
                                                                          "left(Type\u003dBinaryExpr)": {
                                                                            "operator": "PLUS",
                                                                            "left(Type\u003dBinaryExpr)": {
                                                                              "operator": "PLUS",
                                                                              "left(Type\u003dStringLiteralExpr)": {
                                                                                "value": "Types array must be in order largest-smallest: "
                                                                              },
                                                                              "right(Type\u003dMethodCallExpr)": {
                                                                                "name(Type\u003dSimpleName)": {
                                                                                  "identifier": "getName"
                                                                                },
                                                                                "scope(Type\u003dArrayAccessExpr)": {
                                                                                  "index(Type\u003dBinaryExpr)": {
                                                                                    "operator": "MINUS",
                                                                                    "left(Type\u003dNameExpr)": {
                                                                                      "name(Type\u003dSimpleName)": {
                                                                                        "identifier": "i"
                                                                                      }
                                                                                    },
                                                                                    "right(Type\u003dIntegerLiteralExpr)": {
                                                                                      "value": "1"
                                                                                    }
                                                                                  },
                                                                                  "name(Type\u003dNameExpr)": {
                                                                                    "name(Type\u003dSimpleName)": {
                                                                                      "identifier": "types"
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            },
                                                                            "right(Type\u003dStringLiteralExpr)": {
                                                                              "value": " \u003c "
                                                                            }
                                                                          },
                                                                          "right(Type\u003dMethodCallExpr)": {
                                                                            "name(Type\u003dSimpleName)": {
                                                                              "identifier": "getName"
                                                                            },
                                                                            "scope(Type\u003dNameExpr)": {
                                                                              "name(Type\u003dSimpleName)": {
                                                                                "identifier": "loopType"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "statement(Type\u003dIfStmt)": {
                                                          "condition(Type\u003dBinaryExpr)": {
                                                            "operator": "EQUALS",
                                                            "left(Type\u003dMethodCallExpr)": {
                                                              "name(Type\u003dSimpleName)": {
                                                                "identifier": "compareTo"
                                                              },
                                                              "scope(Type\u003dNameExpr)": {
                                                                "name(Type\u003dSimpleName)": {
                                                                  "identifier": "lastRangeField"
                                                                }
                                                              },
                                                              "arguments": [
                                                                {
                                                                  "argument(Type\u003dNameExpr)": {
                                                                    "name(Type\u003dSimpleName)": {
                                                                      "identifier": "loopRangeField"
                                                                    }
                                                                  }
                                                                }
                                                              ]
                                                            },
                                                            "right(Type\u003dIntegerLiteralExpr)": {
                                                              "value": "0"
                                                            }
                                                          },
                                                          "thenStmt(Type\u003dBlockStmt)": {
                                                            "statements": [
                                                              {
                                                                "statement(Type\u003dThrowStmt)": {
                                                                  "expression(Type\u003dObjectCreationExpr)": {
                                                                    "type(Type\u003dClassOrInterfaceType)": {
                                                                      "name(Type\u003dSimpleName)": {
                                                                        "identifier": "IllegalArgumentException"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "argument(Type\u003dBinaryExpr)": {
                                                                          "operator": "PLUS",
                                                                          "left(Type\u003dBinaryExpr)": {
                                                                            "operator": "PLUS",
                                                                            "left(Type\u003dBinaryExpr)": {
                                                                              "operator": "PLUS",
                                                                              "left(Type\u003dStringLiteralExpr)": {
                                                                                "value": "Types array must not contain duplicate: "
                                                                              },
                                                                              "right(Type\u003dMethodCallExpr)": {
                                                                                "name(Type\u003dSimpleName)": {
                                                                                  "identifier": "getName"
                                                                                },
                                                                                "scope(Type\u003dArrayAccessExpr)": {
                                                                                  "index(Type\u003dBinaryExpr)": {
                                                                                    "operator": "MINUS",
                                                                                    "left(Type\u003dNameExpr)": {
                                                                                      "name(Type\u003dSimpleName)": {
                                                                                        "identifier": "i"
                                                                                      }
                                                                                    },
                                                                                    "right(Type\u003dIntegerLiteralExpr)": {
                                                                                      "value": "1"
                                                                                    }
                                                                                  },
                                                                                  "name(Type\u003dNameExpr)": {
                                                                                    "name(Type\u003dSimpleName)": {
                                                                                      "identifier": "types"
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            },
                                                                            "right(Type\u003dStringLiteralExpr)": {
                                                                              "value": " and "
                                                                            }
                                                                          },
                                                                          "right(Type\u003dMethodCallExpr)": {
                                                                            "name(Type\u003dSimpleName)": {
                                                                              "identifier": "getName"
                                                                            },
                                                                            "scope(Type\u003dNameExpr)": {
                                                                              "name(Type\u003dSimpleName)": {
                                                                                "identifier": "loopType"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "thenStmt(Type\u003dBlockStmt)": {
                                                    "statements": [
                                                      {
                                                        "statement(Type\u003dIfStmt)": {
                                                          "condition(Type\u003dBinaryExpr)": {
                                                            "operator": "EQUALS",
                                                            "left(Type\u003dMethodCallExpr)": {
                                                              "name(Type\u003dSimpleName)": {
                                                                "identifier": "getRangeDurationType"
                                                              },
                                                              "scope(Type\u003dNameExpr)": {
                                                                "name(Type\u003dSimpleName)": {
                                                                  "identifier": "loopType"
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "thenStmt(Type\u003dBlockStmt)": {
                                                            "statements": [
                                                              {
                                                                "statement(Type\u003dThrowStmt)": {
                                                                  "expression(Type\u003dObjectCreationExpr)": {
                                                                    "type(Type\u003dClassOrInterfaceType)": {
                                                                      "name(Type\u003dSimpleName)": {
                                                                        "identifier": "IllegalArgumentException"
                                                                      }
                                                                    },
                                                                    "arguments": [
                                                                      {
                                                                        "argument(Type\u003dBinaryExpr)": {
                                                                          "operator": "PLUS",
                                                                          "left(Type\u003dBinaryExpr)": {
                                                                            "operator": "PLUS",
                                                                            "left(Type\u003dBinaryExpr)": {
                                                                              "operator": "PLUS",
                                                                              "left(Type\u003dStringLiteralExpr)": {
                                                                                "value": "Types array must not contain duplicate: "
                                                                              },
                                                                              "right(Type\u003dMethodCallExpr)": {
                                                                                "name(Type\u003dSimpleName)": {
                                                                                  "identifier": "getName"
                                                                                },
                                                                                "scope(Type\u003dArrayAccessExpr)": {
                                                                                  "index(Type\u003dBinaryExpr)": {
                                                                                    "operator": "MINUS",
                                                                                    "left(Type\u003dNameExpr)": {
                                                                                      "name(Type\u003dSimpleName)": {
                                                                                        "identifier": "i"
                                                                                      }
                                                                                    },
                                                                                    "right(Type\u003dIntegerLiteralExpr)": {
                                                                                      "value": "1"
                                                                                    }
                                                                                  },
                                                                                  "name(Type\u003dNameExpr)": {
                                                                                    "name(Type\u003dSimpleName)": {
                                                                                      "identifier": "types"
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            },
                                                                            "right(Type\u003dStringLiteralExpr)": {
                                                                              "value": " and "
                                                                            }
                                                                          },
                                                                          "right(Type\u003dMethodCallExpr)": {
                                                                            "name(Type\u003dSimpleName)": {
                                                                              "identifier": "getName"
                                                                            },
                                                                            "scope(Type\u003dNameExpr)": {
                                                                              "name(Type\u003dSimpleName)": {
                                                                                "identifier": "loopType"
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        "thenStmt(Type\u003dBlockStmt)": {
                                          "statements": [
                                            {
                                              "statement(Type\u003dThrowStmt)": {
                                                "expression(Type\u003dObjectCreationExpr)": {
                                                  "type(Type\u003dClassOrInterfaceType)": {
                                                    "name(Type\u003dSimpleName)": {
                                                      "identifier": "IllegalArgumentException"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "argument(Type\u003dBinaryExpr)": {
                                                        "operator": "PLUS",
                                                        "left(Type\u003dBinaryExpr)": {
                                                          "operator": "PLUS",
                                                          "left(Type\u003dBinaryExpr)": {
                                                            "operator": "PLUS",
                                                            "left(Type\u003dStringLiteralExpr)": {
                                                              "value": "Types array must be in order largest-smallest: "
                                                            },
                                                            "right(Type\u003dMethodCallExpr)": {
                                                              "name(Type\u003dSimpleName)": {
                                                                "identifier": "getName"
                                                              },
                                                              "scope(Type\u003dArrayAccessExpr)": {
                                                                "index(Type\u003dBinaryExpr)": {
                                                                  "operator": "MINUS",
                                                                  "left(Type\u003dNameExpr)": {
                                                                    "name(Type\u003dSimpleName)": {
                                                                      "identifier": "i"
                                                                    }
                                                                  },
                                                                  "right(Type\u003dIntegerLiteralExpr)": {
                                                                    "value": "1"
                                                                  }
                                                                },
                                                                "name(Type\u003dNameExpr)": {
                                                                  "name(Type\u003dSimpleName)": {
                                                                    "identifier": "types"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "right(Type\u003dStringLiteralExpr)": {
                                                            "value": " \u003c "
                                                          }
                                                        },
                                                        "right(Type\u003dMethodCallExpr)": {
                                                          "name(Type\u003dSimpleName)": {
                                                            "identifier": "getName"
                                                          },
                                                          "scope(Type\u003dNameExpr)": {
                                                            "name(Type\u003dSimpleName)": {
                                                              "identifier": "loopType"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dAssignExpr)": {
                                  "operator": "ASSIGN",
                                  "target(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "lastUnitField"
                                    }
                                  },
                                  "value(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "loopUnitField"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        },
                        "compare(Type\u003dBinaryExpr)": {
                          "operator": "LESS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "i"
                            }
                          },
                          "right(Type\u003dFieldAccessExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "length"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "types"
                              }
                            }
                          }
                        },
                        "initialization": [
                          {
                            "initialization(Type\u003dVariableDeclarationExpr)": {
                              "variables": [
                                {
                                  "variable(Type\u003dVariableDeclarator)": {
                                    "initializer(Type\u003dIntegerLiteralExpr)": {
                                      "value": "0"
                                    },
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "i"
                                    },
                                    "type(Type\u003dPrimitiveType)": {
                                      "type": "INT"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "update": [
                          {
                            "update(Type\u003dUnaryExpr)": {
                              "operator": "POSTFIX_INCREMENT",
                              "expression(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "i"
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iTypes"
                            }
                          },
                          "value(Type\u003dCastExpr)": {
                            "expression(Type\u003dMethodCallExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "clone"
                              },
                              "scope(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "types"
                                }
                              }
                            },
                            "type(Type\u003dArrayType)": {
                              "origin": "TYPE",
                              "componentType(Type\u003dClassOrInterfaceType)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "DateTimeFieldType"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dMethodCallExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "validate"
                          },
                          "scope(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "chronology"
                            }
                          },
                          "arguments": [
                            {},
                            {
                              "argument(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "values"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iValues"
                            }
                          },
                          "value(Type\u003dCastExpr)": {
                            "expression(Type\u003dMethodCallExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "clone"
                              },
                              "scope(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "values"
                                }
                              }
                            },
                            "type(Type\u003dArrayType)": {
                              "origin": "TYPE",
                              "componentType(Type\u003dPrimitiveType)": {
                                "type": "INT"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "Partial"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Constructs a Partial with the specified fields and values.\n     * The fields must be specified in the order largest to smallest.\n     * \u003cp\u003e\n     * The constructor uses the specified chronology.\n     * \n     * @param types  the types to create the partial from, not null\n     * @param values  the values to store, not null\n     * @param chronology  the chronology, null means ISO\n     * @throws IllegalArgumentException if the types or values are invalid\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "types"
                      },
                      "type(Type\u003dArrayType)": {
                        "origin": "TYPE",
                        "componentType(Type\u003dClassOrInterfaceType)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "DateTimeFieldType"
                          }
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "values"
                      },
                      "type(Type\u003dArrayType)": {
                        "origin": "TYPE",
                        "componentType(Type\u003dPrimitiveType)": {
                          "type": "INT"
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "chronology"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Chronology"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dConstructorDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExplicitConstructorInvocationStmt)": {
                        "isThis": "false"
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "partial"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dThrowStmt)": {
                                "expression(Type\u003dObjectCreationExpr)": {
                                  "type(Type\u003dClassOrInterfaceType)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "IllegalArgumentException"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dStringLiteralExpr)": {
                                        "value": "The partial must not be null"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iChronology"
                            }
                          },
                          "value(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "withUTC"
                            },
                            "scope(Type\u003dMethodCallExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "getChronology"
                              },
                              "scope(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "DateTimeUtils"
                                }
                              },
                              "arguments": [
                                {
                                  "argument(Type\u003dMethodCallExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "getChronology"
                                    },
                                    "scope(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "partial"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iTypes"
                            }
                          },
                          "value(Type\u003dArrayCreationExpr)": {
                            "elementType(Type\u003dClassOrInterfaceType)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "DateTimeFieldType"
                              }
                            },
                            "levels": [
                              {
                                "level(Type\u003dArrayCreationLevel)": {
                                  "dimension(Type\u003dMethodCallExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "size"
                                    },
                                    "scope(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "partial"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iValues"
                            }
                          },
                          "value(Type\u003dArrayCreationExpr)": {
                            "elementType(Type\u003dPrimitiveType)": {
                              "type": "INT"
                            },
                            "levels": [
                              {
                                "level(Type\u003dArrayCreationLevel)": {
                                  "dimension(Type\u003dMethodCallExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "size"
                                    },
                                    "scope(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "partial"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dForStmt)": {
                        "body(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dAssignExpr)": {
                                  "operator": "ASSIGN",
                                  "target(Type\u003dArrayAccessExpr)": {
                                    "index(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "i"
                                      }
                                    },
                                    "name(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "iTypes"
                                      }
                                    }
                                  },
                                  "value(Type\u003dMethodCallExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "getFieldType"
                                    },
                                    "scope(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "partial"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "argument(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "i"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dAssignExpr)": {
                                  "operator": "ASSIGN",
                                  "target(Type\u003dArrayAccessExpr)": {
                                    "index(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "i"
                                      }
                                    },
                                    "name(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "iValues"
                                      }
                                    }
                                  },
                                  "value(Type\u003dMethodCallExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "getValue"
                                    },
                                    "scope(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "partial"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "argument(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "i"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        },
                        "compare(Type\u003dBinaryExpr)": {
                          "operator": "LESS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "i"
                            }
                          },
                          "right(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "size"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "partial"
                              }
                            }
                          }
                        },
                        "initialization": [
                          {
                            "initialization(Type\u003dVariableDeclarationExpr)": {
                              "variables": [
                                {
                                  "variable(Type\u003dVariableDeclarator)": {
                                    "initializer(Type\u003dIntegerLiteralExpr)": {
                                      "value": "0"
                                    },
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "i"
                                    },
                                    "type(Type\u003dPrimitiveType)": {
                                      "type": "INT"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "update": [
                          {
                            "update(Type\u003dUnaryExpr)": {
                              "operator": "POSTFIX_INCREMENT",
                              "expression(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "i"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "Partial"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Constructs a Partial by copying all the fields and types from\n     * another partial.\n     * \u003cp\u003e\n     * This is most useful when copying from a YearMonthDay or TimeOfDay.\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "partial"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "ReadablePartial"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dConstructorDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExplicitConstructorInvocationStmt)": {
                        "isThis": "false"
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iChronology"
                            }
                          },
                          "value(Type\u003dFieldAccessExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iChronology"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "partial"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iTypes"
                            }
                          },
                          "value(Type\u003dFieldAccessExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iTypes"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "partial"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iValues"
                            }
                          },
                          "value(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "values"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "Partial"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Constructs a Partial with the specified values.\n     * This constructor assigns and performs no validation.\n     * \n     * @param partial  the partial to copy\n     * @param values  the values to store\n     * @throws IllegalArgumentException if the types or values are invalid\n     "
                },
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "partial"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Partial"
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "values"
                      },
                      "type(Type\u003dArrayType)": {
                        "origin": "TYPE",
                        "componentType(Type\u003dPrimitiveType)": {
                          "type": "INT"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dConstructorDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExplicitConstructorInvocationStmt)": {
                        "isThis": "false"
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iChronology"
                            }
                          },
                          "value(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "chronology"
                            }
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iTypes"
                            }
                          },
                          "value(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "types"
                            }
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iValues"
                            }
                          },
                          "value(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "values"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "Partial"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Constructs a Partial with the specified chronology, fields and values.\n     * This constructor assigns and performs no validation.\n     * \n     * @param chronology  the chronology\n     * @param types  the types to create the partial from\n     * @param values  the values to store\n     * @throws IllegalArgumentException if the types or values are invalid\n     "
                },
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "chronology"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Chronology"
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "types"
                      },
                      "type(Type\u003dArrayType)": {
                        "origin": "TYPE",
                        "componentType(Type\u003dClassOrInterfaceType)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "DateTimeFieldType"
                          }
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "values"
                      },
                      "type(Type\u003dArrayType)": {
                        "origin": "TYPE",
                        "componentType(Type\u003dPrimitiveType)": {
                          "type": "INT"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dFieldAccessExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "length"
                          },
                          "scope(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iTypes"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dPrimitiveType)": {
                  "type": "INT"
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "size"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets the number of fields in this partial.\n     * \n     * @return the field count\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dNameExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "iChronology"
                          }
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "Chronology"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "getChronology"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets the chronology of the partial which is never null.\n     * \u003cp\u003e\n     * The {@link Chronology} is the calculation engine behind the partial and\n     * provides conversion and validation of the fields in a particular calendar system.\n     * \n     * @return the chronology, never null\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dMethodCallExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "getField"
                          },
                          "scope(Type\u003dArrayAccessExpr)": {
                            "index(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "index"
                              }
                            },
                            "name(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "iTypes"
                              }
                            }
                          },
                          "arguments": [
                            {
                              "argument(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "chrono"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "DateTimeField"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "getField"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets the field for a specific index in the chronology specified.\n     * \n     * @param index  the index to retrieve\n     * @param chrono  the chronology to use\n     * @return the field\n     * @throws IndexOutOfBoundsException if the index is invalid\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PROTECTED"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "index"
                      },
                      "type(Type\u003dPrimitiveType)": {
                        "type": "INT"
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "chrono"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Chronology"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dArrayAccessExpr)": {
                          "index(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "index"
                            }
                          },
                          "name(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iTypes"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "DateTimeFieldType"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "getFieldType"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets the field type at the specified index.\n     *\n     * @param index  the index to retrieve\n     * @return the field at the specified index\n     * @throws IndexOutOfBoundsException if the index is invalid\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "index"
                      },
                      "type(Type\u003dPrimitiveType)": {
                        "type": "INT"
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dCastExpr)": {
                          "expression(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "clone"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "iTypes"
                              }
                            }
                          },
                          "type(Type\u003dArrayType)": {
                            "origin": "TYPE",
                            "componentType(Type\u003dClassOrInterfaceType)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "DateTimeFieldType"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dArrayType)": {
                  "origin": "TYPE",
                  "componentType(Type\u003dClassOrInterfaceType)": {
                    "name(Type\u003dSimpleName)": {
                      "identifier": "DateTimeFieldType"
                    }
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "getFieldTypes"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets an array of the field type of each of the fields that\n     * this partial supports.\n     * \u003cp\u003e\n     * The fields are returned largest to smallest.\n     *\n     * @return the array of field types (cloned), largest to smallest\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dArrayAccessExpr)": {
                          "index(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "index"
                            }
                          },
                          "name(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iValues"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dPrimitiveType)": {
                  "type": "INT"
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "getValue"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets the value of the field at the specifed index.\n     * \n     * @param index  the index\n     * @return the value\n     * @throws IndexOutOfBoundsException if the index is invalid\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "index"
                      },
                      "type(Type\u003dPrimitiveType)": {
                        "type": "INT"
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dCastExpr)": {
                          "expression(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "clone"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "iValues"
                              }
                            }
                          },
                          "type(Type\u003dArrayType)": {
                            "origin": "TYPE",
                            "componentType(Type\u003dPrimitiveType)": {
                              "type": "INT"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dArrayType)": {
                  "origin": "TYPE",
                  "componentType(Type\u003dPrimitiveType)": {
                    "type": "INT"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "getValues"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets an array of the value of each of the fields that\n     * this partial supports.\n     * \u003cp\u003e\n     * The fields are returned largest to smallest.\n     * Each value corresponds to the same array index as \u003ccode\u003egetFieldTypes()\u003c/code\u003e\n     *\n     * @return the current values of each field (cloned), largest to smallest\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "newChronology"
                            }
                          },
                          "value(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "getChronology"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "DateTimeUtils"
                              }
                            },
                            "arguments": [
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "newChronology"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "newChronology"
                            }
                          },
                          "value(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "withUTC"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "newChronology"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "newChronology"
                            }
                          },
                          "right(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "getChronology"
                            }
                          }
                        },
                        "elseStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dObjectCreationExpr)": {
                                          "type(Type\u003dClassOrInterfaceType)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "Partial"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "newChronology"
                                                }
                                              }
                                            },
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "iTypes"
                                                }
                                              }
                                            },
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "iValues"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newPartial"
                                        },
                                        "type(Type\u003dClassOrInterfaceType)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "Partial"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "validate"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "newChronology"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newPartial"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iValues"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dReturnStmt)": {
                                "expression(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "newPartial"
                                  }
                                }
                              }
                            }
                          ]
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dReturnStmt)": {}
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "Partial"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "withChronologyRetainFields"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Creates a new Partial instance with the specified chronology.\n     * This instance is immutable and unaffected by this method call.\n     * \u003cp\u003e\n     * This method retains the values of the fields, thus the result will\n     * typically refer to a different instant.\n     * \u003cp\u003e\n     * The time zone of the specified chronology is ignored, as Partial\n     * operates without a time zone.\n     *\n     * @param newChronology  the new chronology, null means ISO\n     * @return a copy of this datetime with a different chronology\n     * @throws IllegalArgumentException if the values are invalid for the new chronology\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "newChronology"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Chronology"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "fieldType"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dThrowStmt)": {
                                "expression(Type\u003dObjectCreationExpr)": {
                                  "type(Type\u003dClassOrInterfaceType)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "IllegalArgumentException"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dStringLiteralExpr)": {
                                        "value": "The field type must not be null"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "indexOf"
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "fieldType"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "index"
                                },
                                "type(Type\u003dPrimitiveType)": {
                                  "type": "INT"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "index"
                            }
                          },
                          "right(Type\u003dUnaryExpr)": {
                            "operator": "MINUS",
                            "expression(Type\u003dIntegerLiteralExpr)": {
                              "value": "1"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dArrayCreationExpr)": {
                                          "elementType(Type\u003dClassOrInterfaceType)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "DateTimeFieldType"
                                            }
                                          },
                                          "levels": [
                                            {
                                              "level(Type\u003dArrayCreationLevel)": {
                                                "dimension(Type\u003dBinaryExpr)": {
                                                  "operator": "PLUS",
                                                  "left(Type\u003dFieldAccessExpr)": {
                                                    "name(Type\u003dSimpleName)": {
                                                      "identifier": "length"
                                                    },
                                                    "scope(Type\u003dNameExpr)": {
                                                      "name(Type\u003dSimpleName)": {
                                                        "identifier": "iTypes"
                                                      }
                                                    }
                                                  },
                                                  "right(Type\u003dIntegerLiteralExpr)": {
                                                    "value": "1"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newTypes"
                                        },
                                        "type(Type\u003dArrayType)": {
                                          "origin": "TYPE",
                                          "componentType(Type\u003dClassOrInterfaceType)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "DateTimeFieldType"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dArrayCreationExpr)": {
                                          "elementType(Type\u003dPrimitiveType)": {
                                            "type": "INT"
                                          },
                                          "levels": [
                                            {
                                              "level(Type\u003dArrayCreationLevel)": {
                                                "dimension(Type\u003dFieldAccessExpr)": {
                                                  "name(Type\u003dSimpleName)": {
                                                    "identifier": "length"
                                                  },
                                                  "scope(Type\u003dNameExpr)": {
                                                    "name(Type\u003dSimpleName)": {
                                                      "identifier": "newTypes"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newValues"
                                        },
                                        "type(Type\u003dArrayType)": {
                                          "origin": "TYPE",
                                          "componentType(Type\u003dPrimitiveType)": {
                                            "type": "INT"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dIntegerLiteralExpr)": {
                                          "value": "0"
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "i"
                                        },
                                        "type(Type\u003dPrimitiveType)": {
                                          "type": "INT"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "comment(Type\u003dLineComment)": {
                                  "content": " find correct insertion point to keep largest-smallest order"
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dMethodCallExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "getField"
                                          },
                                          "scope(Type\u003dMethodCallExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "getDurationType"
                                            },
                                            "scope(Type\u003dNameExpr)": {
                                              "name(Type\u003dSimpleName)": {
                                                "identifier": "fieldType"
                                              }
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "iChronology"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "unitField"
                                        },
                                        "type(Type\u003dClassOrInterfaceType)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "DurationField"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dIfStmt)": {
                                "condition(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "isSupported"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "unitField"
                                    }
                                  }
                                },
                                "thenStmt(Type\u003dBlockStmt)": {
                                  "statements": [
                                    {
                                      "statement(Type\u003dForStmt)": {
                                        "body(Type\u003dBlockStmt)": {
                                          "statements": [
                                            {
                                              "statement(Type\u003dExpressionStmt)": {
                                                "expression(Type\u003dVariableDeclarationExpr)": {
                                                  "variables": [
                                                    {
                                                      "variable(Type\u003dVariableDeclarator)": {
                                                        "initializer(Type\u003dArrayAccessExpr)": {
                                                          "index(Type\u003dNameExpr)": {
                                                            "name(Type\u003dSimpleName)": {
                                                              "identifier": "i"
                                                            }
                                                          },
                                                          "name(Type\u003dNameExpr)": {
                                                            "name(Type\u003dSimpleName)": {
                                                              "identifier": "iTypes"
                                                            }
                                                          }
                                                        },
                                                        "name(Type\u003dSimpleName)": {
                                                          "identifier": "loopType"
                                                        },
                                                        "type(Type\u003dClassOrInterfaceType)": {
                                                          "name(Type\u003dSimpleName)": {
                                                            "identifier": "DateTimeFieldType"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "statement(Type\u003dExpressionStmt)": {
                                                "expression(Type\u003dVariableDeclarationExpr)": {
                                                  "variables": [
                                                    {
                                                      "variable(Type\u003dVariableDeclarator)": {
                                                        "initializer(Type\u003dMethodCallExpr)": {
                                                          "name(Type\u003dSimpleName)": {
                                                            "identifier": "getField"
                                                          },
                                                          "scope(Type\u003dMethodCallExpr)": {
                                                            "name(Type\u003dSimpleName)": {
                                                              "identifier": "getDurationType"
                                                            },
                                                            "scope(Type\u003dNameExpr)": {
                                                              "name(Type\u003dSimpleName)": {
                                                                "identifier": "loopType"
                                                              }
                                                            }
                                                          },
                                                          "arguments": [
                                                            {
                                                              "argument(Type\u003dNameExpr)": {
                                                                "name(Type\u003dSimpleName)": {
                                                                  "identifier": "iChronology"
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        },
                                                        "name(Type\u003dSimpleName)": {
                                                          "identifier": "loopUnitField"
                                                        },
                                                        "type(Type\u003dClassOrInterfaceType)": {
                                                          "name(Type\u003dSimpleName)": {
                                                            "identifier": "DurationField"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            },
                                            {
                                              "statement(Type\u003dIfStmt)": {
                                                "condition(Type\u003dMethodCallExpr)": {
                                                  "name(Type\u003dSimpleName)": {
                                                    "identifier": "isSupported"
                                                  },
                                                  "scope(Type\u003dNameExpr)": {
                                                    "name(Type\u003dSimpleName)": {
                                                      "identifier": "loopUnitField"
                                                    }
                                                  }
                                                },
                                                "thenStmt(Type\u003dBlockStmt)": {
                                                  "statements": [
                                                    {
                                                      "statement(Type\u003dExpressionStmt)": {
                                                        "expression(Type\u003dVariableDeclarationExpr)": {
                                                          "variables": [
                                                            {
                                                              "variable(Type\u003dVariableDeclarator)": {
                                                                "initializer(Type\u003dMethodCallExpr)": {
                                                                  "name(Type\u003dSimpleName)": {
                                                                    "identifier": "compareTo"
                                                                  },
                                                                  "scope(Type\u003dNameExpr)": {
                                                                    "name(Type\u003dSimpleName)": {
                                                                      "identifier": "unitField"
                                                                    }
                                                                  },
                                                                  "arguments": [
                                                                    {
                                                                      "argument(Type\u003dNameExpr)": {
                                                                        "name(Type\u003dSimpleName)": {
                                                                          "identifier": "loopUnitField"
                                                                        }
                                                                      }
                                                                    }
                                                                  ]
                                                                },
                                                                "name(Type\u003dSimpleName)": {
                                                                  "identifier": "compare"
                                                                },
                                                                "type(Type\u003dPrimitiveType)": {
                                                                  "type": "INT"
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "statement(Type\u003dIfStmt)": {
                                                        "condition(Type\u003dBinaryExpr)": {
                                                          "operator": "GREATER",
                                                          "left(Type\u003dNameExpr)": {
                                                            "name(Type\u003dSimpleName)": {
                                                              "identifier": "compare"
                                                            }
                                                          },
                                                          "right(Type\u003dIntegerLiteralExpr)": {
                                                            "value": "0"
                                                          }
                                                        },
                                                        "elseStmt(Type\u003dIfStmt)": {
                                                          "condition(Type\u003dBinaryExpr)": {
                                                            "operator": "EQUALS",
                                                            "left(Type\u003dNameExpr)": {
                                                              "name(Type\u003dSimpleName)": {
                                                                "identifier": "compare"
                                                              }
                                                            },
                                                            "right(Type\u003dIntegerLiteralExpr)": {
                                                              "value": "0"
                                                            }
                                                          },
                                                          "thenStmt(Type\u003dBlockStmt)": {
                                                            "statements": [
                                                              {
                                                                "statement(Type\u003dIfStmt)": {
                                                                  "condition(Type\u003dBinaryExpr)": {
                                                                    "operator": "EQUALS",
                                                                    "left(Type\u003dMethodCallExpr)": {
                                                                      "name(Type\u003dSimpleName)": {
                                                                        "identifier": "getRangeDurationType"
                                                                      },
                                                                      "scope(Type\u003dNameExpr)": {
                                                                        "name(Type\u003dSimpleName)": {
                                                                          "identifier": "fieldType"
                                                                        }
                                                                      }
                                                                    }
                                                                  },
                                                                  "thenStmt(Type\u003dBlockStmt)": {
                                                                    "statements": [
                                                                      {}
                                                                    ]
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "statement(Type\u003dExpressionStmt)": {
                                                                  "expression(Type\u003dVariableDeclarationExpr)": {
                                                                    "variables": [
                                                                      {
                                                                        "variable(Type\u003dVariableDeclarator)": {
                                                                          "initializer(Type\u003dMethodCallExpr)": {
                                                                            "name(Type\u003dSimpleName)": {
                                                                              "identifier": "getField"
                                                                            },
                                                                            "scope(Type\u003dMethodCallExpr)": {
                                                                              "name(Type\u003dSimpleName)": {
                                                                                "identifier": "getRangeDurationType"
                                                                              },
                                                                              "scope(Type\u003dNameExpr)": {
                                                                                "name(Type\u003dSimpleName)": {
                                                                                  "identifier": "fieldType"
                                                                                }
                                                                              }
                                                                            },
                                                                            "arguments": [
                                                                              {
                                                                                "argument(Type\u003dNameExpr)": {
                                                                                  "name(Type\u003dSimpleName)": {
                                                                                    "identifier": "iChronology"
                                                                                  }
                                                                                }
                                                                              }
                                                                            ]
                                                                          },
                                                                          "name(Type\u003dSimpleName)": {
                                                                            "identifier": "rangeField"
                                                                          },
                                                                          "type(Type\u003dClassOrInterfaceType)": {
                                                                            "name(Type\u003dSimpleName)": {
                                                                              "identifier": "DurationField"
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "statement(Type\u003dExpressionStmt)": {
                                                                  "expression(Type\u003dVariableDeclarationExpr)": {
                                                                    "variables": [
                                                                      {
                                                                        "variable(Type\u003dVariableDeclarator)": {
                                                                          "initializer(Type\u003dMethodCallExpr)": {
                                                                            "name(Type\u003dSimpleName)": {
                                                                              "identifier": "getField"
                                                                            },
                                                                            "scope(Type\u003dMethodCallExpr)": {
                                                                              "name(Type\u003dSimpleName)": {
                                                                                "identifier": "getRangeDurationType"
                                                                              },
                                                                              "scope(Type\u003dNameExpr)": {
                                                                                "name(Type\u003dSimpleName)": {
                                                                                  "identifier": "loopType"
                                                                                }
                                                                              }
                                                                            },
                                                                            "arguments": [
                                                                              {
                                                                                "argument(Type\u003dNameExpr)": {
                                                                                  "name(Type\u003dSimpleName)": {
                                                                                    "identifier": "iChronology"
                                                                                  }
                                                                                }
                                                                              }
                                                                            ]
                                                                          },
                                                                          "name(Type\u003dSimpleName)": {
                                                                            "identifier": "loopRangeField"
                                                                          },
                                                                          "type(Type\u003dClassOrInterfaceType)": {
                                                                            "name(Type\u003dSimpleName)": {
                                                                              "identifier": "DurationField"
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "statement(Type\u003dIfStmt)": {
                                                                  "condition(Type\u003dBinaryExpr)": {
                                                                    "operator": "GREATER",
                                                                    "left(Type\u003dMethodCallExpr)": {
                                                                      "name(Type\u003dSimpleName)": {
                                                                        "identifier": "compareTo"
                                                                      },
                                                                      "scope(Type\u003dNameExpr)": {
                                                                        "name(Type\u003dSimpleName)": {
                                                                          "identifier": "rangeField"
                                                                        }
                                                                      },
                                                                      "arguments": [
                                                                        {
                                                                          "argument(Type\u003dNameExpr)": {
                                                                            "name(Type\u003dSimpleName)": {
                                                                              "identifier": "loopRangeField"
                                                                            }
                                                                          }
                                                                        }
                                                                      ]
                                                                    },
                                                                    "right(Type\u003dIntegerLiteralExpr)": {
                                                                      "value": "0"
                                                                    }
                                                                  },
                                                                  "thenStmt(Type\u003dBlockStmt)": {
                                                                    "statements": [
                                                                      {}
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        "thenStmt(Type\u003dBlockStmt)": {
                                                          "statements": [
                                                            {}
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "compare(Type\u003dBinaryExpr)": {
                                          "operator": "LESS",
                                          "left(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "i"
                                            }
                                          },
                                          "right(Type\u003dFieldAccessExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "length"
                                            },
                                            "scope(Type\u003dNameExpr)": {
                                              "name(Type\u003dSimpleName)": {
                                                "identifier": "iTypes"
                                              }
                                            }
                                          }
                                        },
                                        "update": [
                                          {
                                            "update(Type\u003dUnaryExpr)": {
                                              "operator": "POSTFIX_INCREMENT",
                                              "expression(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "i"
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "arraycopy"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "System"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iTypes"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dIntegerLiteralExpr)": {
                                        "value": "0"
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newTypes"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dIntegerLiteralExpr)": {
                                        "value": "0"
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "i"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "arraycopy"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "System"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iValues"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dIntegerLiteralExpr)": {
                                        "value": "0"
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newValues"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dIntegerLiteralExpr)": {
                                        "value": "0"
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "i"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dAssignExpr)": {
                                  "operator": "ASSIGN",
                                  "target(Type\u003dArrayAccessExpr)": {
                                    "index(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "i"
                                      }
                                    },
                                    "name(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "newTypes"
                                      }
                                    }
                                  },
                                  "value(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "fieldType"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dAssignExpr)": {
                                  "operator": "ASSIGN",
                                  "target(Type\u003dArrayAccessExpr)": {
                                    "index(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "i"
                                      }
                                    },
                                    "name(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "newValues"
                                      }
                                    }
                                  },
                                  "value(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "value"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "arraycopy"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "System"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iTypes"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "i"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newTypes"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dBinaryExpr)": {
                                        "operator": "PLUS",
                                        "left(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "i"
                                          }
                                        },
                                        "right(Type\u003dIntegerLiteralExpr)": {
                                          "value": "1"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dBinaryExpr)": {
                                        "operator": "MINUS",
                                        "left(Type\u003dBinaryExpr)": {
                                          "operator": "MINUS",
                                          "left(Type\u003dFieldAccessExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "length"
                                            },
                                            "scope(Type\u003dNameExpr)": {
                                              "name(Type\u003dSimpleName)": {
                                                "identifier": "newTypes"
                                              }
                                            }
                                          },
                                          "right(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "i"
                                            }
                                          }
                                        },
                                        "right(Type\u003dIntegerLiteralExpr)": {
                                          "value": "1"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "arraycopy"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "System"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iValues"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "i"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newValues"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dBinaryExpr)": {
                                        "operator": "PLUS",
                                        "left(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "i"
                                          }
                                        },
                                        "right(Type\u003dIntegerLiteralExpr)": {
                                          "value": "1"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dBinaryExpr)": {
                                        "operator": "MINUS",
                                        "left(Type\u003dBinaryExpr)": {
                                          "operator": "MINUS",
                                          "left(Type\u003dFieldAccessExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "length"
                                            },
                                            "scope(Type\u003dNameExpr)": {
                                              "name(Type\u003dSimpleName)": {
                                                "identifier": "newValues"
                                              }
                                            }
                                          },
                                          "right(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "i"
                                            }
                                          }
                                        },
                                        "right(Type\u003dIntegerLiteralExpr)": {
                                          "value": "1"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dObjectCreationExpr)": {
                                          "type(Type\u003dClassOrInterfaceType)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "Partial"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "newTypes"
                                                }
                                              }
                                            },
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "newValues"
                                                }
                                              }
                                            },
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "iChronology"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newPartial"
                                        },
                                        "type(Type\u003dClassOrInterfaceType)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "Partial"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "comment(Type\u003dLineComment)": {
                                  "content": " this isn\u0027t overly efficient, but is safe"
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "validate"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "iChronology"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newPartial"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newValues"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dReturnStmt)": {
                                "expression(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "newPartial"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "value"
                            }
                          },
                          "right(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "getValue"
                            },
                            "arguments": [
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "index"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dReturnStmt)": {}
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "getValues"
                                  }
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "newValues"
                                },
                                "type(Type\u003dArrayType)": {
                                  "origin": "TYPE",
                                  "componentType(Type\u003dPrimitiveType)": {
                                    "type": "INT"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "newValues"
                            }
                          },
                          "value(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "set"
                            },
                            "scope(Type\u003dMethodCallExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "getField"
                              },
                              "arguments": [
                                {
                                  "argument(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "index"
                                    }
                                  }
                                }
                              ]
                            },
                            "arguments": [
                              {},
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "index"
                                  }
                                }
                              },
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "newValues"
                                  }
                                }
                              },
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "value"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dObjectCreationExpr)": {
                          "type(Type\u003dClassOrInterfaceType)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "Partial"
                            }
                          },
                          "arguments": [
                            {},
                            {
                              "argument(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "newValues"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "Partial"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "with"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets a copy of this date with the specified field set to a new value.\n     * \u003cp\u003e\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * \u003cp\u003e\n     * For example, if the field type is \u003ccode\u003edayOfMonth\u003c/code\u003e then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "fieldType"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "DateTimeFieldType"
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "value"
                      },
                      "type(Type\u003dPrimitiveType)": {
                        "type": "INT"
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "indexOf"
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "fieldType"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "index"
                                },
                                "type(Type\u003dPrimitiveType)": {
                                  "type": "INT"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "NOT_EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "index"
                            }
                          },
                          "right(Type\u003dUnaryExpr)": {
                            "operator": "MINUS",
                            "expression(Type\u003dIntegerLiteralExpr)": {
                              "value": "1"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dArrayCreationExpr)": {
                                          "elementType(Type\u003dClassOrInterfaceType)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "DateTimeFieldType"
                                            }
                                          },
                                          "levels": [
                                            {
                                              "level(Type\u003dArrayCreationLevel)": {
                                                "dimension(Type\u003dBinaryExpr)": {
                                                  "operator": "MINUS",
                                                  "left(Type\u003dMethodCallExpr)": {
                                                    "name(Type\u003dSimpleName)": {
                                                      "identifier": "size"
                                                    }
                                                  },
                                                  "right(Type\u003dIntegerLiteralExpr)": {
                                                    "value": "1"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newTypes"
                                        },
                                        "type(Type\u003dArrayType)": {
                                          "origin": "TYPE",
                                          "componentType(Type\u003dClassOrInterfaceType)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "DateTimeFieldType"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dArrayCreationExpr)": {
                                          "elementType(Type\u003dPrimitiveType)": {
                                            "type": "INT"
                                          },
                                          "levels": [
                                            {
                                              "level(Type\u003dArrayCreationLevel)": {
                                                "dimension(Type\u003dBinaryExpr)": {
                                                  "operator": "MINUS",
                                                  "left(Type\u003dMethodCallExpr)": {
                                                    "name(Type\u003dSimpleName)": {
                                                      "identifier": "size"
                                                    }
                                                  },
                                                  "right(Type\u003dIntegerLiteralExpr)": {
                                                    "value": "1"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newValues"
                                        },
                                        "type(Type\u003dArrayType)": {
                                          "origin": "TYPE",
                                          "componentType(Type\u003dPrimitiveType)": {
                                            "type": "INT"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "arraycopy"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "System"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iTypes"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dIntegerLiteralExpr)": {
                                        "value": "0"
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newTypes"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dIntegerLiteralExpr)": {
                                        "value": "0"
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "index"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "arraycopy"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "System"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iTypes"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dBinaryExpr)": {
                                        "operator": "PLUS",
                                        "left(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "index"
                                          }
                                        },
                                        "right(Type\u003dIntegerLiteralExpr)": {
                                          "value": "1"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newTypes"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "index"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dBinaryExpr)": {
                                        "operator": "MINUS",
                                        "left(Type\u003dFieldAccessExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "length"
                                          },
                                          "scope(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "newTypes"
                                            }
                                          }
                                        },
                                        "right(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "index"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "arraycopy"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "System"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iValues"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dIntegerLiteralExpr)": {
                                        "value": "0"
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newValues"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dIntegerLiteralExpr)": {
                                        "value": "0"
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "index"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "arraycopy"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "System"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iValues"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dBinaryExpr)": {
                                        "operator": "PLUS",
                                        "left(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "index"
                                          }
                                        },
                                        "right(Type\u003dIntegerLiteralExpr)": {
                                          "value": "1"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newValues"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "index"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dBinaryExpr)": {
                                        "operator": "MINUS",
                                        "left(Type\u003dFieldAccessExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "length"
                                          },
                                          "scope(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "newValues"
                                            }
                                          }
                                        },
                                        "right(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "index"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dObjectCreationExpr)": {
                                          "type(Type\u003dClassOrInterfaceType)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "Partial"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "iChronology"
                                                }
                                              }
                                            },
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "newTypes"
                                                }
                                              }
                                            },
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "newValues"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newPartial"
                                        },
                                        "type(Type\u003dClassOrInterfaceType)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "Partial"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "validate"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "iChronology"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newPartial"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newValues"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dReturnStmt)": {
                                "expression(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "newPartial"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {}
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "Partial"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "without"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets a copy of this date with the specified field removed.\n     * \u003cp\u003e\n     * If this partial did not previously support the field, no error occurs.\n     *\n     * @param fieldType  the field type to remove, may be null\n     * @return a copy of this instance with the field removed\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "fieldType"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "DateTimeFieldType"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "indexOfSupported"
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "fieldType"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "index"
                                },
                                "type(Type\u003dPrimitiveType)": {
                                  "type": "INT"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "value"
                            }
                          },
                          "right(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "getValue"
                            },
                            "arguments": [
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "index"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dReturnStmt)": {}
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "getValues"
                                  }
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "newValues"
                                },
                                "type(Type\u003dArrayType)": {
                                  "origin": "TYPE",
                                  "componentType(Type\u003dPrimitiveType)": {
                                    "type": "INT"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "newValues"
                            }
                          },
                          "value(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "set"
                            },
                            "scope(Type\u003dMethodCallExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "getField"
                              },
                              "arguments": [
                                {
                                  "argument(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "index"
                                    }
                                  }
                                }
                              ]
                            },
                            "arguments": [
                              {},
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "index"
                                  }
                                }
                              },
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "newValues"
                                  }
                                }
                              },
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "value"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dObjectCreationExpr)": {
                          "type(Type\u003dClassOrInterfaceType)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "Partial"
                            }
                          },
                          "arguments": [
                            {},
                            {
                              "argument(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "newValues"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "Partial"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "withField"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets a copy of this Partial with the specified field set to a new value.\n     * \u003cp\u003e\n     * If this partial does not support the field, an exception is thrown.\n     * Contrast this behaviour with {@link #with(DateTimeFieldType, int)}.\n     * \u003cp\u003e\n     * For example, if the field type is \u003ccode\u003edayOfMonth\u003c/code\u003e then the day\n     * would be changed in the returned instance if supported.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "fieldType"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "DateTimeFieldType"
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "value"
                      },
                      "type(Type\u003dPrimitiveType)": {
                        "type": "INT"
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "indexOfSupported"
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "fieldType"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "index"
                                },
                                "type(Type\u003dPrimitiveType)": {
                                  "type": "INT"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "amount"
                            }
                          },
                          "right(Type\u003dIntegerLiteralExpr)": {
                            "value": "0"
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dReturnStmt)": {}
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "getValues"
                                  }
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "newValues"
                                },
                                "type(Type\u003dArrayType)": {
                                  "origin": "TYPE",
                                  "componentType(Type\u003dPrimitiveType)": {
                                    "type": "INT"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "newValues"
                            }
                          },
                          "value(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "add"
                            },
                            "scope(Type\u003dMethodCallExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "getField"
                              },
                              "arguments": [
                                {
                                  "argument(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "index"
                                    }
                                  }
                                }
                              ]
                            },
                            "arguments": [
                              {},
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "index"
                                  }
                                }
                              },
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "newValues"
                                  }
                                }
                              },
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "amount"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dObjectCreationExpr)": {
                          "type(Type\u003dClassOrInterfaceType)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "Partial"
                            }
                          },
                          "arguments": [
                            {},
                            {
                              "argument(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "newValues"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "Partial"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "withFieldAdded"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets a copy of this Partial with the value of the specified field increased.\n     * If this partial does not support the field, an exception is thrown.\n     * \u003cp\u003e\n     * If the addition is zero, then \u003ccode\u003ethis\u003c/code\u003e is returned.\n     * The addition will overflow into larger fields (eg. minute to hour).\n     * However, it will not wrap around if the top maximum is reached.\n     *\n     * @param fieldType  the field type to add to, not null\n     * @param amount  the amount to add\n     * @return a copy of this instance with the field updated\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the new datetime exceeds the capacity\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "fieldType"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "DurationFieldType"
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "amount"
                      },
                      "type(Type\u003dPrimitiveType)": {
                        "type": "INT"
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "indexOfSupported"
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "fieldType"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "index"
                                },
                                "type(Type\u003dPrimitiveType)": {
                                  "type": "INT"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "amount"
                            }
                          },
                          "right(Type\u003dIntegerLiteralExpr)": {
                            "value": "0"
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dReturnStmt)": {}
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "getValues"
                                  }
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "newValues"
                                },
                                "type(Type\u003dArrayType)": {
                                  "origin": "TYPE",
                                  "componentType(Type\u003dPrimitiveType)": {
                                    "type": "INT"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dAssignExpr)": {
                          "operator": "ASSIGN",
                          "target(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "newValues"
                            }
                          },
                          "value(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "addWrapPartial"
                            },
                            "scope(Type\u003dMethodCallExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "getField"
                              },
                              "arguments": [
                                {
                                  "argument(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "index"
                                    }
                                  }
                                }
                              ]
                            },
                            "arguments": [
                              {},
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "index"
                                  }
                                }
                              },
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "newValues"
                                  }
                                }
                              },
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "amount"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dObjectCreationExpr)": {
                          "type(Type\u003dClassOrInterfaceType)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "Partial"
                            }
                          },
                          "arguments": [
                            {},
                            {
                              "argument(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "newValues"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "Partial"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "withFieldAddWrapped"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets a copy of this Partial with the value of the specified field increased.\n     * If this partial does not support the field, an exception is thrown.\n     * \u003cp\u003e\n     * If the addition is zero, then \u003ccode\u003ethis\u003c/code\u003e is returned.\n     * The addition will overflow into larger fields (eg. minute to hour).\n     * If the maximum is reached, the addition will wra.\n     *\n     * @param fieldType  the field type to add to, not null\n     * @param amount  the amount to add\n     * @return a copy of this instance with the field updated\n     * @throws IllegalArgumentException if the value is null or invalid\n     * @throws ArithmeticException if the new datetime exceeds the capacity\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "fieldType"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "DurationFieldType"
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "amount"
                      },
                      "type(Type\u003dPrimitiveType)": {
                        "type": "INT"
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "OR",
                          "left(Type\u003dBinaryExpr)": {
                            "operator": "EQUALS",
                            "left(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "period"
                              }
                            }
                          },
                          "right(Type\u003dBinaryExpr)": {
                            "operator": "EQUALS",
                            "left(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "scalar"
                              }
                            },
                            "right(Type\u003dIntegerLiteralExpr)": {
                              "value": "0"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dReturnStmt)": {}
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "getValues"
                                  }
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "newValues"
                                },
                                "type(Type\u003dArrayType)": {
                                  "origin": "TYPE",
                                  "componentType(Type\u003dPrimitiveType)": {
                                    "type": "INT"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dForStmt)": {
                        "body(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dMethodCallExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "getFieldType"
                                          },
                                          "scope(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "period"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "i"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "fieldType"
                                        },
                                        "type(Type\u003dClassOrInterfaceType)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "DurationFieldType"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dMethodCallExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "indexOf"
                                          },
                                          "arguments": [
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "fieldType"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "index"
                                        },
                                        "type(Type\u003dPrimitiveType)": {
                                          "type": "INT"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dIfStmt)": {
                                "condition(Type\u003dBinaryExpr)": {
                                  "operator": "GREATER_EQUALS",
                                  "left(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "index"
                                    }
                                  },
                                  "right(Type\u003dIntegerLiteralExpr)": {
                                    "value": "0"
                                  }
                                },
                                "thenStmt(Type\u003dBlockStmt)": {
                                  "statements": [
                                    {
                                      "statement(Type\u003dExpressionStmt)": {
                                        "expression(Type\u003dAssignExpr)": {
                                          "operator": "ASSIGN",
                                          "target(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "newValues"
                                            }
                                          },
                                          "value(Type\u003dMethodCallExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "add"
                                            },
                                            "scope(Type\u003dMethodCallExpr)": {
                                              "name(Type\u003dSimpleName)": {
                                                "identifier": "getField"
                                              },
                                              "arguments": [
                                                {
                                                  "argument(Type\u003dNameExpr)": {
                                                    "name(Type\u003dSimpleName)": {
                                                      "identifier": "index"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "arguments": [
                                              {},
                                              {
                                                "argument(Type\u003dNameExpr)": {
                                                  "name(Type\u003dSimpleName)": {
                                                    "identifier": "index"
                                                  }
                                                }
                                              },
                                              {
                                                "argument(Type\u003dNameExpr)": {
                                                  "name(Type\u003dSimpleName)": {
                                                    "identifier": "newValues"
                                                  }
                                                }
                                              },
                                              {
                                                "argument(Type\u003dMethodCallExpr)": {
                                                  "name(Type\u003dSimpleName)": {
                                                    "identifier": "safeMultiply"
                                                  },
                                                  "scope(Type\u003dNameExpr)": {
                                                    "name(Type\u003dSimpleName)": {
                                                      "identifier": "FieldUtils"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "argument(Type\u003dMethodCallExpr)": {
                                                        "name(Type\u003dSimpleName)": {
                                                          "identifier": "getValue"
                                                        },
                                                        "scope(Type\u003dNameExpr)": {
                                                          "name(Type\u003dSimpleName)": {
                                                            "identifier": "period"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "argument(Type\u003dNameExpr)": {
                                                              "name(Type\u003dSimpleName)": {
                                                                "identifier": "i"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "argument(Type\u003dNameExpr)": {
                                                        "name(Type\u003dSimpleName)": {
                                                          "identifier": "scalar"
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "compare(Type\u003dBinaryExpr)": {
                          "operator": "LESS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "i"
                            }
                          },
                          "right(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "size"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "period"
                              }
                            }
                          }
                        },
                        "initialization": [
                          {
                            "initialization(Type\u003dVariableDeclarationExpr)": {
                              "variables": [
                                {
                                  "variable(Type\u003dVariableDeclarator)": {
                                    "initializer(Type\u003dIntegerLiteralExpr)": {
                                      "value": "0"
                                    },
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "i"
                                    },
                                    "type(Type\u003dPrimitiveType)": {
                                      "type": "INT"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "update": [
                          {
                            "update(Type\u003dUnaryExpr)": {
                              "operator": "POSTFIX_INCREMENT",
                              "expression(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "i"
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dObjectCreationExpr)": {
                          "type(Type\u003dClassOrInterfaceType)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "Partial"
                            }
                          },
                          "arguments": [
                            {},
                            {
                              "argument(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "newValues"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "Partial"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "withPeriodAdded"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets a copy of this Partial with the specified period added.\n     * \u003cp\u003e\n     * If the addition is zero, then \u003ccode\u003ethis\u003c/code\u003e is returned.\n     * Fields in the period that aren\u0027t present in the partial are ignored.\n     * \u003cp\u003e\n     * This method is typically used to add multiple copies of complex\n     * period instances. Adding one field is best achieved using the method\n     * {@link #withFieldAdded(DurationFieldType, int)}.\n     * \n     * @param period  the period to add to this one, null means zero\n     * @param scalar  the amount of times to add, such as -1 to subtract once\n     * @return a copy of this instance with the period added\n     * @throws ArithmeticException if the new datetime exceeds the capacity\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "period"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "ReadablePeriod"
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "scalar"
                      },
                      "type(Type\u003dPrimitiveType)": {
                        "type": "INT"
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dMethodCallExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "withPeriodAdded"
                          },
                          "arguments": [
                            {
                              "argument(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "period"
                                }
                              }
                            },
                            {
                              "argument(Type\u003dIntegerLiteralExpr)": {
                                "value": "1"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "Partial"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "plus"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets a copy of this instance with the specified period added.\n     * \u003cp\u003e\n     * If the amount is zero or null, then \u003ccode\u003ethis\u003c/code\u003e is returned.\n     *\n     * @param period  the duration to add to this one, null means zero\n     * @return a copy of this instance with the period added\n     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "period"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "ReadablePeriod"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dMethodCallExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "withPeriodAdded"
                          },
                          "arguments": [
                            {
                              "argument(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "period"
                                }
                              }
                            },
                            {
                              "argument(Type\u003dUnaryExpr)": {
                                "operator": "MINUS",
                                "expression(Type\u003dIntegerLiteralExpr)": {
                                  "value": "1"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "Partial"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "minus"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets a copy of this instance with the specified period take away.\n     * \u003cp\u003e\n     * If the amount is zero or null, then \u003ccode\u003ethis\u003c/code\u003e is returned.\n     *\n     * @param period  the period to reduce this instant by\n     * @return a copy of this instance with the period taken away\n     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "period"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "ReadablePeriod"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dObjectCreationExpr)": {
                          "type(Type\u003dClassOrInterfaceType)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "Property"
                            }
                          },
                          "arguments": [
                            {},
                            {
                              "argument(Type\u003dMethodCallExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "indexOfSupported"
                                },
                                "arguments": [
                                  {
                                    "argument(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "type"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "Property"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "property"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets the property object for the specified type, which contains\n     * many useful methods for getting and manipulating the partial.\n     * \u003cp\u003e\n     * See also {@link ReadablePartial#get(DateTimeFieldType)}.\n     *\n     * @param type  the field type to get the property for, not null\n     * @return the property object\n     * @throws IllegalArgumentException if the field is null or unsupported\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "type"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "DateTimeFieldType"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "getInstantMillis"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "DateTimeUtils"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "instant"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "millis"
                                },
                                "type(Type\u003dPrimitiveType)": {
                                  "type": "LONG"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "getInstantChronology"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "DateTimeUtils"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "instant"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "chrono"
                                },
                                "type(Type\u003dClassOrInterfaceType)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "Chronology"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dForStmt)": {
                        "body(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dMethodCallExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "get"
                                          },
                                          "scope(Type\u003dMethodCallExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "getField"
                                            },
                                            "scope(Type\u003dArrayAccessExpr)": {
                                              "index(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "i"
                                                }
                                              },
                                              "name(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "iTypes"
                                                }
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "argument(Type\u003dNameExpr)": {
                                                  "name(Type\u003dSimpleName)": {
                                                    "identifier": "chrono"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "arguments": [
                                            {
                                              "argument(Type\u003dNameExpr)": {
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "millis"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "value"
                                        },
                                        "type(Type\u003dPrimitiveType)": {
                                          "type": "INT"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dIfStmt)": {
                                "condition(Type\u003dBinaryExpr)": {
                                  "operator": "NOT_EQUALS",
                                  "left(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "value"
                                    }
                                  },
                                  "right(Type\u003dArrayAccessExpr)": {
                                    "index(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "i"
                                      }
                                    },
                                    "name(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "iValues"
                                      }
                                    }
                                  }
                                },
                                "thenStmt(Type\u003dBlockStmt)": {
                                  "statements": [
                                    {
                                      "statement(Type\u003dReturnStmt)": {
                                        "expression(Type\u003dBooleanLiteralExpr)": {
                                          "value": "false"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "compare(Type\u003dBinaryExpr)": {
                          "operator": "LESS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "i"
                            }
                          },
                          "right(Type\u003dFieldAccessExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "length"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "iTypes"
                              }
                            }
                          }
                        },
                        "initialization": [
                          {
                            "initialization(Type\u003dVariableDeclarationExpr)": {
                              "variables": [
                                {
                                  "variable(Type\u003dVariableDeclarator)": {
                                    "initializer(Type\u003dIntegerLiteralExpr)": {
                                      "value": "0"
                                    },
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "i"
                                    },
                                    "type(Type\u003dPrimitiveType)": {
                                      "type": "INT"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "update": [
                          {
                            "update(Type\u003dUnaryExpr)": {
                              "operator": "POSTFIX_INCREMENT",
                              "expression(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "i"
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dBooleanLiteralExpr)": {
                          "value": "true"
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dPrimitiveType)": {
                  "type": "BOOLEAN"
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "isMatch"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Does this partial match the specified instant.\n     * \u003cp\u003e\n     * A match occurs when all the fields of this partial are the same as the\n     * corresponding fields on the specified instant.\n     *\n     * @param instant  an instant to check against, null means now in default zone\n     * @return true if this partial matches the specified instant\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "instant"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "ReadableInstant"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "partial"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dThrowStmt)": {
                                "expression(Type\u003dObjectCreationExpr)": {
                                  "type(Type\u003dClassOrInterfaceType)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "IllegalArgumentException"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dStringLiteralExpr)": {
                                        "value": "The partial must not be null"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dForStmt)": {
                        "body(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dVariableDeclarationExpr)": {
                                  "variables": [
                                    {
                                      "variable(Type\u003dVariableDeclarator)": {
                                        "initializer(Type\u003dMethodCallExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "get"
                                          },
                                          "scope(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "partial"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "argument(Type\u003dArrayAccessExpr)": {
                                                "index(Type\u003dNameExpr)": {
                                                  "name(Type\u003dSimpleName)": {
                                                    "identifier": "i"
                                                  }
                                                },
                                                "name(Type\u003dNameExpr)": {
                                                  "name(Type\u003dSimpleName)": {
                                                    "identifier": "iTypes"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "value"
                                        },
                                        "type(Type\u003dPrimitiveType)": {
                                          "type": "INT"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dIfStmt)": {
                                "condition(Type\u003dBinaryExpr)": {
                                  "operator": "NOT_EQUALS",
                                  "left(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "value"
                                    }
                                  },
                                  "right(Type\u003dArrayAccessExpr)": {
                                    "index(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "i"
                                      }
                                    },
                                    "name(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "iValues"
                                      }
                                    }
                                  }
                                },
                                "thenStmt(Type\u003dBlockStmt)": {
                                  "statements": [
                                    {
                                      "statement(Type\u003dReturnStmt)": {
                                        "expression(Type\u003dBooleanLiteralExpr)": {
                                          "value": "false"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "compare(Type\u003dBinaryExpr)": {
                          "operator": "LESS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "i"
                            }
                          },
                          "right(Type\u003dFieldAccessExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "length"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "iTypes"
                              }
                            }
                          }
                        },
                        "initialization": [
                          {
                            "initialization(Type\u003dVariableDeclarationExpr)": {
                              "variables": [
                                {
                                  "variable(Type\u003dVariableDeclarator)": {
                                    "initializer(Type\u003dIntegerLiteralExpr)": {
                                      "value": "0"
                                    },
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "i"
                                    },
                                    "type(Type\u003dPrimitiveType)": {
                                      "type": "INT"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "update": [
                          {
                            "update(Type\u003dUnaryExpr)": {
                              "operator": "POSTFIX_INCREMENT",
                              "expression(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "i"
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dBooleanLiteralExpr)": {
                          "value": "true"
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dPrimitiveType)": {
                  "type": "BOOLEAN"
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "isMatch"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Does this partial match the specified partial.\n     * \u003cp\u003e\n     * A match occurs when all the fields of this partial are the same as the\n     * corresponding fields on the specified partial.\n     *\n     * @param partial  a partial to check against, must not be null\n     * @return true if this partial matches the specified partial\n     * @throws IllegalArgumentException if the partial is null\n     * @throws IllegalArgumentException if the fields of the two partials do not match\n     * @since 1.5\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "partial"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "ReadablePartial"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "iFormatter"
                                  }
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "f"
                                },
                                "type(Type\u003dArrayType)": {
                                  "origin": "TYPE",
                                  "componentType(Type\u003dClassOrInterfaceType)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "DateTimeFormatter"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "f"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dIfStmt)": {
                                "condition(Type\u003dBinaryExpr)": {
                                  "operator": "EQUALS",
                                  "left(Type\u003dMethodCallExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "size"
                                    }
                                  },
                                  "right(Type\u003dIntegerLiteralExpr)": {
                                    "value": "0"
                                  }
                                },
                                "thenStmt(Type\u003dBlockStmt)": {
                                  "statements": [
                                    {
                                      "statement(Type\u003dReturnStmt)": {}
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dAssignExpr)": {
                                  "operator": "ASSIGN",
                                  "target(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "f"
                                    }
                                  },
                                  "value(Type\u003dArrayCreationExpr)": {
                                    "elementType(Type\u003dClassOrInterfaceType)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "DateTimeFormatter"
                                      }
                                    },
                                    "levels": [
                                      {
                                        "level(Type\u003dArrayCreationLevel)": {
                                          "dimension(Type\u003dIntegerLiteralExpr)": {
                                            "value": "2"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "statement(Type\u003dTryStmt)": {
                                "tryBlock(Type\u003dBlockStmt)": {
                                  "statements": [
                                    {
                                      "statement(Type\u003dExpressionStmt)": {
                                        "expression(Type\u003dVariableDeclarationExpr)": {
                                          "variables": [
                                            {
                                              "variable(Type\u003dVariableDeclarator)": {
                                                "initializer(Type\u003dObjectCreationExpr)": {
                                                  "type(Type\u003dClassOrInterfaceType)": {
                                                    "name(Type\u003dSimpleName)": {
                                                      "identifier": "ArrayList"
                                                    },
                                                    "typeArguments": [
                                                      {
                                                        "typeArgument(Type\u003dClassOrInterfaceType)": {
                                                          "name(Type\u003dSimpleName)": {
                                                            "identifier": "DateTimeFieldType"
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "arguments": [
                                                    {
                                                      "argument(Type\u003dMethodCallExpr)": {
                                                        "name(Type\u003dSimpleName)": {
                                                          "identifier": "asList"
                                                        },
                                                        "scope(Type\u003dNameExpr)": {
                                                          "name(Type\u003dSimpleName)": {
                                                            "identifier": "Arrays"
                                                          }
                                                        },
                                                        "arguments": [
                                                          {
                                                            "argument(Type\u003dNameExpr)": {
                                                              "name(Type\u003dSimpleName)": {
                                                                "identifier": "iTypes"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "name(Type\u003dSimpleName)": {
                                                  "identifier": "list"
                                                },
                                                "type(Type\u003dClassOrInterfaceType)": {
                                                  "name(Type\u003dSimpleName)": {
                                                    "identifier": "List"
                                                  },
                                                  "typeArguments": [
                                                    {
                                                      "typeArgument(Type\u003dClassOrInterfaceType)": {
                                                        "name(Type\u003dSimpleName)": {
                                                          "identifier": "DateTimeFieldType"
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    {
                                      "statement(Type\u003dExpressionStmt)": {
                                        "expression(Type\u003dAssignExpr)": {
                                          "operator": "ASSIGN",
                                          "target(Type\u003dArrayAccessExpr)": {
                                            "index(Type\u003dIntegerLiteralExpr)": {
                                              "value": "0"
                                            },
                                            "name(Type\u003dNameExpr)": {
                                              "name(Type\u003dSimpleName)": {
                                                "identifier": "f"
                                              }
                                            }
                                          },
                                          "value(Type\u003dMethodCallExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "forFields"
                                            },
                                            "scope(Type\u003dNameExpr)": {
                                              "name(Type\u003dSimpleName)": {
                                                "identifier": "ISODateTimeFormat"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "argument(Type\u003dNameExpr)": {
                                                  "name(Type\u003dSimpleName)": {
                                                    "identifier": "list"
                                                  }
                                                }
                                              },
                                              {
                                                "argument(Type\u003dBooleanLiteralExpr)": {
                                                  "value": "true"
                                                }
                                              },
                                              {
                                                "argument(Type\u003dBooleanLiteralExpr)": {
                                                  "value": "false"
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "statement(Type\u003dIfStmt)": {
                                        "condition(Type\u003dBinaryExpr)": {
                                          "operator": "EQUALS",
                                          "left(Type\u003dMethodCallExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "size"
                                            },
                                            "scope(Type\u003dNameExpr)": {
                                              "name(Type\u003dSimpleName)": {
                                                "identifier": "list"
                                              }
                                            }
                                          },
                                          "right(Type\u003dIntegerLiteralExpr)": {
                                            "value": "0"
                                          }
                                        },
                                        "thenStmt(Type\u003dBlockStmt)": {
                                          "statements": [
                                            {
                                              "statement(Type\u003dExpressionStmt)": {
                                                "expression(Type\u003dAssignExpr)": {
                                                  "operator": "ASSIGN",
                                                  "target(Type\u003dArrayAccessExpr)": {
                                                    "index(Type\u003dIntegerLiteralExpr)": {
                                                      "value": "1"
                                                    },
                                                    "name(Type\u003dNameExpr)": {
                                                      "name(Type\u003dSimpleName)": {
                                                        "identifier": "f"
                                                      }
                                                    }
                                                  },
                                                  "value(Type\u003dArrayAccessExpr)": {
                                                    "index(Type\u003dIntegerLiteralExpr)": {
                                                      "value": "0"
                                                    },
                                                    "name(Type\u003dNameExpr)": {
                                                      "name(Type\u003dSimpleName)": {
                                                        "identifier": "f"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                "catchClauses": [
                                  {
                                    "catchClause(Type\u003dCatchClause)": {
                                      "parameter(Type\u003dParameter)": {
                                        "isVarArgs": "false",
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "ex"
                                        },
                                        "type(Type\u003dClassOrInterfaceType)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "IllegalArgumentException"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dAssignExpr)": {
                                  "operator": "ASSIGN",
                                  "target(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "iFormatter"
                                    }
                                  },
                                  "value(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "f"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dArrayAccessExpr)": {
                          "index(Type\u003dIntegerLiteralExpr)": {
                            "value": "0"
                          },
                          "name(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "f"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "DateTimeFormatter"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "getFormatter"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets a formatter suitable for the fields in this partial.\n     * \u003cp\u003e\n     * If there is no appropriate ISO format, null is returned.\n     * This method may return a formatter that does not display all the\n     * fields of the partial. This might occur when you have overlapping\n     * fields, such as dayOfWeek and dayOfMonth.\n     *\n     * @return a formatter suitable for the fields in this partial, null\n     *  if none is suitable\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "iFormatter"
                                  }
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "f"
                                },
                                "type(Type\u003dArrayType)": {
                                  "origin": "TYPE",
                                  "componentType(Type\u003dClassOrInterfaceType)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "DateTimeFormatter"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "f"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "getFormatter"
                                  }
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dAssignExpr)": {
                                  "operator": "ASSIGN",
                                  "target(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "f"
                                    }
                                  },
                                  "value(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "iFormatter"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "statement(Type\u003dIfStmt)": {
                                "condition(Type\u003dBinaryExpr)": {
                                  "operator": "EQUALS",
                                  "left(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "f"
                                    }
                                  }
                                },
                                "thenStmt(Type\u003dBlockStmt)": {
                                  "statements": [
                                    {
                                      "statement(Type\u003dReturnStmt)": {
                                        "expression(Type\u003dMethodCallExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "toStringList"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dArrayAccessExpr)": {
                                  "index(Type\u003dIntegerLiteralExpr)": {
                                    "value": "1"
                                  },
                                  "name(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "f"
                                    }
                                  }
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "f1"
                                },
                                "type(Type\u003dClassOrInterfaceType)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "DateTimeFormatter"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "f1"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dReturnStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "toStringList"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dMethodCallExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "print"
                          },
                          "scope(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "f1"
                            }
                          },
                          "arguments": [
                            {}
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "String"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "toString"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Output the date in an appropriate ISO8601 format.\n     * \u003cp\u003e\n     * This method will output the partial in one of two ways.\n     * If {@link #getFormatter()}\n     * \u003cp\u003e\n     * If there is no appropriate ISO format a dump of the fields is output\n     * via {@link #toStringList()}.\n     * \n     * @return ISO8601 formatted string\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "size"
                                  }
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "size"
                                },
                                "type(Type\u003dPrimitiveType)": {
                                  "type": "INT"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dVariableDeclarationExpr)": {
                          "variables": [
                            {
                              "variable(Type\u003dVariableDeclarator)": {
                                "initializer(Type\u003dObjectCreationExpr)": {
                                  "type(Type\u003dClassOrInterfaceType)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "StringBuilder"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dBinaryExpr)": {
                                        "operator": "MULTIPLY",
                                        "left(Type\u003dIntegerLiteralExpr)": {
                                          "value": "20"
                                        },
                                        "right(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "size"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "buf"
                                },
                                "type(Type\u003dClassOrInterfaceType)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "StringBuilder"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dMethodCallExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "append"
                          },
                          "scope(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "buf"
                            }
                          },
                          "arguments": [
                            {
                              "argument(Type\u003dCharLiteralExpr)": {
                                "value": "["
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dForStmt)": {
                        "body(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dIfStmt)": {
                                "condition(Type\u003dBinaryExpr)": {
                                  "operator": "GREATER",
                                  "left(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "i"
                                    }
                                  },
                                  "right(Type\u003dIntegerLiteralExpr)": {
                                    "value": "0"
                                  }
                                },
                                "thenStmt(Type\u003dBlockStmt)": {
                                  "statements": [
                                    {
                                      "statement(Type\u003dExpressionStmt)": {
                                        "expression(Type\u003dMethodCallExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "append"
                                          },
                                          "scope(Type\u003dMethodCallExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "append"
                                            },
                                            "scope(Type\u003dNameExpr)": {
                                              "name(Type\u003dSimpleName)": {
                                                "identifier": "buf"
                                              }
                                            },
                                            "arguments": [
                                              {
                                                "argument(Type\u003dCharLiteralExpr)": {
                                                  "value": ","
                                                }
                                              }
                                            ]
                                          },
                                          "arguments": [
                                            {
                                              "argument(Type\u003dCharLiteralExpr)": {
                                                "value": " "
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "append"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "buf"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dMethodCallExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "getName"
                                        },
                                        "scope(Type\u003dArrayAccessExpr)": {
                                          "index(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "i"
                                            }
                                          },
                                          "name(Type\u003dNameExpr)": {
                                            "name(Type\u003dSimpleName)": {
                                              "identifier": "iTypes"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "append"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "buf"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dCharLiteralExpr)": {
                                        "value": "\u003d"
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "statement(Type\u003dExpressionStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "append"
                                  },
                                  "scope(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "buf"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dArrayAccessExpr)": {
                                        "index(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "i"
                                          }
                                        },
                                        "name(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "iValues"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "compare(Type\u003dBinaryExpr)": {
                          "operator": "LESS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "i"
                            }
                          },
                          "right(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "size"
                            }
                          }
                        },
                        "initialization": [
                          {
                            "initialization(Type\u003dVariableDeclarationExpr)": {
                              "variables": [
                                {
                                  "variable(Type\u003dVariableDeclarator)": {
                                    "initializer(Type\u003dIntegerLiteralExpr)": {
                                      "value": "0"
                                    },
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "i"
                                    },
                                    "type(Type\u003dPrimitiveType)": {
                                      "type": "INT"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "update": [
                          {
                            "update(Type\u003dUnaryExpr)": {
                              "operator": "POSTFIX_INCREMENT",
                              "expression(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "i"
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "statement(Type\u003dExpressionStmt)": {
                        "expression(Type\u003dMethodCallExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "append"
                          },
                          "scope(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "buf"
                            }
                          },
                          "arguments": [
                            {
                              "argument(Type\u003dCharLiteralExpr)": {
                                "value": "]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dMethodCallExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "toString"
                          },
                          "scope(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "buf"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "String"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "toStringList"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Gets a string version of the partial that lists all the fields.\n     * \u003cp\u003e\n     * This method exists to provide a better debugging toString than\n     * the standard toString. This method lists all the fields and their\n     * values in a style similar to the collections framework.\n     *\n     * @return a toString format that lists all the fields\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "pattern"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dReturnStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "toString"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dMethodCallExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "print"
                          },
                          "scope(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "forPattern"
                            },
                            "scope(Type\u003dNameExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "DateTimeFormat"
                              }
                            },
                            "arguments": [
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "pattern"
                                  }
                                }
                              }
                            ]
                          },
                          "arguments": [
                            {}
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "String"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "toString"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use \u003ccode\u003etoString\u003c/code\u003e\n     * @see org.joda.time.format.DateTimeFormat\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "pattern"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "String"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dMethodDeclaration)": {
                "body(Type\u003dBlockStmt)": {
                  "statements": [
                    {
                      "statement(Type\u003dIfStmt)": {
                        "condition(Type\u003dBinaryExpr)": {
                          "operator": "EQUALS",
                          "left(Type\u003dNameExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "pattern"
                            }
                          }
                        },
                        "thenStmt(Type\u003dBlockStmt)": {
                          "statements": [
                            {
                              "statement(Type\u003dReturnStmt)": {
                                "expression(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "toString"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "statement(Type\u003dReturnStmt)": {
                        "expression(Type\u003dMethodCallExpr)": {
                          "name(Type\u003dSimpleName)": {
                            "identifier": "print"
                          },
                          "scope(Type\u003dMethodCallExpr)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "withLocale"
                            },
                            "scope(Type\u003dMethodCallExpr)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "forPattern"
                              },
                              "scope(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "DateTimeFormat"
                                }
                              },
                              "arguments": [
                                {
                                  "argument(Type\u003dNameExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "pattern"
                                    }
                                  }
                                }
                              ]
                            },
                            "arguments": [
                              {
                                "argument(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "locale"
                                  }
                                }
                              }
                            ]
                          },
                          "arguments": [
                            {}
                          ]
                        }
                      }
                    }
                  ]
                },
                "type(Type\u003dClassOrInterfaceType)": {
                  "name(Type\u003dSimpleName)": {
                    "identifier": "String"
                  }
                },
                "name(Type\u003dSimpleName)": {
                  "identifier": "toString"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * Output the date using the specified format pattern.\n     * Unsupported fields will appear as special unicode characters.\n     *\n     * @param pattern  the pattern specification, null means use \u003ccode\u003etoString\u003c/code\u003e\n     * @param locale  Locale to use, null means default\n     * @see org.joda.time.format.DateTimeFormat\n     "
                },
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  }
                ],
                "parameters": [
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "pattern"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "String"
                        }
                      }
                    }
                  },
                  {
                    "parameter(Type\u003dParameter)": {
                      "isVarArgs": "false",
                      "name(Type\u003dSimpleName)": {
                        "identifier": "locale"
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Locale"
                        }
                      }
                    }
                  }
                ]
              }
            },
            {
              "member(Type\u003dClassOrInterfaceDeclaration)": {
                "isInterface": "false",
                "name(Type\u003dSimpleName)": {
                  "identifier": "Property"
                },
                "comment(Type\u003dJavadocComment)": {
                  "content": "\n     * The property class for \u003ccode\u003ePartial\u003c/code\u003e.\n     * \u003cp\u003e\n     * This class binds a \u003ccode\u003ePartial\u003c/code\u003e to a \u003ccode\u003eDateTimeField\u003c/code\u003e.\n     * \n     * @author Stephen Colebourne\n     * @since 1.1\n     "
                },
                "extendedTypes": [
                  {
                    "extendedType(Type\u003dClassOrInterfaceType)": {
                      "name(Type\u003dSimpleName)": {
                        "identifier": "AbstractPartialFieldProperty"
                      }
                    }
                  }
                ],
                "implementedTypes": [
                  {
                    "implementedType(Type\u003dClassOrInterfaceType)": {
                      "name(Type\u003dSimpleName)": {
                        "identifier": "Serializable"
                      }
                    }
                  }
                ],
                "members": [
                  {
                    "member(Type\u003dFieldDeclaration)": {
                      "comment(Type\u003dJavadocComment)": {
                        "content": " Serialization version "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PRIVATE"
                          }
                        },
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "STATIC"
                          }
                        },
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "FINAL"
                          }
                        }
                      ],
                      "variables": [
                        {
                          "variable(Type\u003dVariableDeclarator)": {
                            "initializer(Type\u003dLongLiteralExpr)": {
                              "value": "53278362873888L"
                            },
                            "name(Type\u003dSimpleName)": {
                              "identifier": "serialVersionUID"
                            },
                            "type(Type\u003dPrimitiveType)": {
                              "type": "LONG"
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dFieldDeclaration)": {
                      "comment(Type\u003dJavadocComment)": {
                        "content": " The partial "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PRIVATE"
                          }
                        },
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "FINAL"
                          }
                        }
                      ],
                      "variables": [
                        {
                          "variable(Type\u003dVariableDeclarator)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iPartial"
                            },
                            "type(Type\u003dClassOrInterfaceType)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "Partial"
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dFieldDeclaration)": {
                      "comment(Type\u003dJavadocComment)": {
                        "content": " The field index "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PRIVATE"
                          }
                        },
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "FINAL"
                          }
                        }
                      ],
                      "variables": [
                        {
                          "variable(Type\u003dVariableDeclarator)": {
                            "name(Type\u003dSimpleName)": {
                              "identifier": "iFieldIndex"
                            },
                            "type(Type\u003dPrimitiveType)": {
                              "type": "INT"
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dConstructorDeclaration)": {
                      "body(Type\u003dBlockStmt)": {
                        "statements": [
                          {
                            "statement(Type\u003dExplicitConstructorInvocationStmt)": {
                              "isThis": "false"
                            }
                          },
                          {
                            "statement(Type\u003dExpressionStmt)": {
                              "expression(Type\u003dAssignExpr)": {
                                "operator": "ASSIGN",
                                "target(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "iPartial"
                                  }
                                },
                                "value(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "partial"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "statement(Type\u003dExpressionStmt)": {
                              "expression(Type\u003dAssignExpr)": {
                                "operator": "ASSIGN",
                                "target(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "iFieldIndex"
                                  }
                                },
                                "value(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "fieldIndex"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "Property"
                      },
                      "comment(Type\u003dJavadocComment)": {
                        "content": "\n         * Constructs a property.\n         * \n         * @param partial  the partial instance\n         * @param fieldIndex  the index in the partial\n         "
                      },
                      "parameters": [
                        {
                          "parameter(Type\u003dParameter)": {
                            "isVarArgs": "false",
                            "name(Type\u003dSimpleName)": {
                              "identifier": "partial"
                            },
                            "type(Type\u003dClassOrInterfaceType)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "Partial"
                              }
                            }
                          }
                        },
                        {
                          "parameter(Type\u003dParameter)": {
                            "isVarArgs": "false",
                            "name(Type\u003dSimpleName)": {
                              "identifier": "fieldIndex"
                            },
                            "type(Type\u003dPrimitiveType)": {
                              "type": "INT"
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dMethodDeclaration)": {
                      "body(Type\u003dBlockStmt)": {
                        "statements": [
                          {
                            "statement(Type\u003dReturnStmt)": {
                              "expression(Type\u003dMethodCallExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "getField"
                                },
                                "scope(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "iPartial"
                                  }
                                },
                                "arguments": [
                                  {
                                    "argument(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "iFieldIndex"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "DateTimeField"
                        }
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "getField"
                      },
                      "comment(Type\u003dJavadocComment)": {
                        "content": "\n         * Gets the field that this property uses.\n         * \n         * @return the field\n         "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PUBLIC"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dMethodDeclaration)": {
                      "body(Type\u003dBlockStmt)": {
                        "statements": [
                          {
                            "statement(Type\u003dReturnStmt)": {
                              "expression(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "iPartial"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "ReadablePartial"
                        }
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "getReadablePartial"
                      },
                      "comment(Type\u003dJavadocComment)": {
                        "content": "\n         * Gets the partial that this property belongs to.\n         * \n         * @return the partial\n         "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PROTECTED"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dMethodDeclaration)": {
                      "body(Type\u003dBlockStmt)": {
                        "statements": [
                          {
                            "statement(Type\u003dReturnStmt)": {
                              "expression(Type\u003dNameExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "iPartial"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Partial"
                        }
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "getPartial"
                      },
                      "comment(Type\u003dJavadocComment)": {
                        "content": "\n         * Gets the partial that this property belongs to.\n         * \n         * @return the partial\n         "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PUBLIC"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dMethodDeclaration)": {
                      "body(Type\u003dBlockStmt)": {
                        "statements": [
                          {
                            "statement(Type\u003dReturnStmt)": {
                              "expression(Type\u003dMethodCallExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "getValue"
                                },
                                "scope(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "iPartial"
                                  }
                                },
                                "arguments": [
                                  {
                                    "argument(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "iFieldIndex"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "type(Type\u003dPrimitiveType)": {
                        "type": "INT"
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "get"
                      },
                      "comment(Type\u003dJavadocComment)": {
                        "content": "\n         * Gets the value of this field.\n         * \n         * @return the field value\n         "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PUBLIC"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dMethodDeclaration)": {
                      "body(Type\u003dBlockStmt)": {
                        "statements": [
                          {
                            "statement(Type\u003dExpressionStmt)": {
                              "expression(Type\u003dVariableDeclarationExpr)": {
                                "variables": [
                                  {
                                    "variable(Type\u003dVariableDeclarator)": {
                                      "initializer(Type\u003dMethodCallExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "getValues"
                                        },
                                        "scope(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "iPartial"
                                          }
                                        }
                                      },
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "newValues"
                                      },
                                      "type(Type\u003dArrayType)": {
                                        "origin": "TYPE",
                                        "componentType(Type\u003dPrimitiveType)": {
                                          "type": "INT"
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "statement(Type\u003dExpressionStmt)": {
                              "expression(Type\u003dAssignExpr)": {
                                "operator": "ASSIGN",
                                "target(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "newValues"
                                  }
                                },
                                "value(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "add"
                                  },
                                  "scope(Type\u003dMethodCallExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "getField"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iPartial"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iFieldIndex"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newValues"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "valueToAdd"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            "statement(Type\u003dReturnStmt)": {
                              "expression(Type\u003dObjectCreationExpr)": {
                                "type(Type\u003dClassOrInterfaceType)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "Partial"
                                  }
                                },
                                "arguments": [
                                  {
                                    "argument(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "iPartial"
                                      }
                                    }
                                  },
                                  {
                                    "argument(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "newValues"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Partial"
                        }
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "addToCopy"
                      },
                      "comment(Type\u003dJavadocComment)": {
                        "content": "\n         * Adds to the value of this field in a copy of this Partial.\n         * \u003cp\u003e\n         * The value will be added to this field. If the value is too large to be\n         * added solely to this field then it will affect larger fields.\n         * Smaller fields are unaffected.\n         * \u003cp\u003e\n         * If the result would be too large, beyond the maximum year, then an\n         * IllegalArgumentException is thrown.\n         * \u003cp\u003e\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param valueToAdd  the value to add to the field in the copy\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the value isn\u0027t valid\n         "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PUBLIC"
                          }
                        }
                      ],
                      "parameters": [
                        {
                          "parameter(Type\u003dParameter)": {
                            "isVarArgs": "false",
                            "name(Type\u003dSimpleName)": {
                              "identifier": "valueToAdd"
                            },
                            "type(Type\u003dPrimitiveType)": {
                              "type": "INT"
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dMethodDeclaration)": {
                      "body(Type\u003dBlockStmt)": {
                        "statements": [
                          {
                            "statement(Type\u003dExpressionStmt)": {
                              "expression(Type\u003dVariableDeclarationExpr)": {
                                "variables": [
                                  {
                                    "variable(Type\u003dVariableDeclarator)": {
                                      "initializer(Type\u003dMethodCallExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "getValues"
                                        },
                                        "scope(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "iPartial"
                                          }
                                        }
                                      },
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "newValues"
                                      },
                                      "type(Type\u003dArrayType)": {
                                        "origin": "TYPE",
                                        "componentType(Type\u003dPrimitiveType)": {
                                          "type": "INT"
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "statement(Type\u003dExpressionStmt)": {
                              "expression(Type\u003dAssignExpr)": {
                                "operator": "ASSIGN",
                                "target(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "newValues"
                                  }
                                },
                                "value(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "addWrapField"
                                  },
                                  "scope(Type\u003dMethodCallExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "getField"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iPartial"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iFieldIndex"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newValues"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "valueToAdd"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            "statement(Type\u003dReturnStmt)": {
                              "expression(Type\u003dObjectCreationExpr)": {
                                "type(Type\u003dClassOrInterfaceType)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "Partial"
                                  }
                                },
                                "arguments": [
                                  {
                                    "argument(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "iPartial"
                                      }
                                    }
                                  },
                                  {
                                    "argument(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "newValues"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Partial"
                        }
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "addWrapFieldToCopy"
                      },
                      "comment(Type\u003dJavadocComment)": {
                        "content": "\n         * Adds to the value of this field in a copy of this Partial wrapping\n         * within this field if the maximum value is reached.\n         * \u003cp\u003e\n         * The value will be added to this field. If the value is too large to be\n         * added solely to this field then it wraps within this field.\n         * Other fields are unaffected.\n         * \u003cp\u003e\n         * For example,\n         * \u003ccode\u003e2004-12-20\u003c/code\u003e addWrapField one month returns \u003ccode\u003e2004-01-20\u003c/code\u003e.\n         * \u003cp\u003e\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param valueToAdd  the value to add to the field in the copy\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the value isn\u0027t valid\n         "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PUBLIC"
                          }
                        }
                      ],
                      "parameters": [
                        {
                          "parameter(Type\u003dParameter)": {
                            "isVarArgs": "false",
                            "name(Type\u003dSimpleName)": {
                              "identifier": "valueToAdd"
                            },
                            "type(Type\u003dPrimitiveType)": {
                              "type": "INT"
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dMethodDeclaration)": {
                      "body(Type\u003dBlockStmt)": {
                        "statements": [
                          {
                            "statement(Type\u003dExpressionStmt)": {
                              "expression(Type\u003dVariableDeclarationExpr)": {
                                "variables": [
                                  {
                                    "variable(Type\u003dVariableDeclarator)": {
                                      "initializer(Type\u003dMethodCallExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "getValues"
                                        },
                                        "scope(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "iPartial"
                                          }
                                        }
                                      },
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "newValues"
                                      },
                                      "type(Type\u003dArrayType)": {
                                        "origin": "TYPE",
                                        "componentType(Type\u003dPrimitiveType)": {
                                          "type": "INT"
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "statement(Type\u003dExpressionStmt)": {
                              "expression(Type\u003dAssignExpr)": {
                                "operator": "ASSIGN",
                                "target(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "newValues"
                                  }
                                },
                                "value(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "set"
                                  },
                                  "scope(Type\u003dMethodCallExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "getField"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iPartial"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iFieldIndex"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newValues"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "value"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            "statement(Type\u003dReturnStmt)": {
                              "expression(Type\u003dObjectCreationExpr)": {
                                "type(Type\u003dClassOrInterfaceType)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "Partial"
                                  }
                                },
                                "arguments": [
                                  {
                                    "argument(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "iPartial"
                                      }
                                    }
                                  },
                                  {
                                    "argument(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "newValues"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Partial"
                        }
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "setCopy"
                      },
                      "comment(Type\u003dJavadocComment)": {
                        "content": "\n         * Sets this field in a copy of the Partial.\n         * \u003cp\u003e\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param value  the value to set the field in the copy to\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the value isn\u0027t valid\n         "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PUBLIC"
                          }
                        }
                      ],
                      "parameters": [
                        {
                          "parameter(Type\u003dParameter)": {
                            "isVarArgs": "false",
                            "name(Type\u003dSimpleName)": {
                              "identifier": "value"
                            },
                            "type(Type\u003dPrimitiveType)": {
                              "type": "INT"
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dMethodDeclaration)": {
                      "body(Type\u003dBlockStmt)": {
                        "statements": [
                          {
                            "statement(Type\u003dExpressionStmt)": {
                              "expression(Type\u003dVariableDeclarationExpr)": {
                                "variables": [
                                  {
                                    "variable(Type\u003dVariableDeclarator)": {
                                      "initializer(Type\u003dMethodCallExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "getValues"
                                        },
                                        "scope(Type\u003dNameExpr)": {
                                          "name(Type\u003dSimpleName)": {
                                            "identifier": "iPartial"
                                          }
                                        }
                                      },
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "newValues"
                                      },
                                      "type(Type\u003dArrayType)": {
                                        "origin": "TYPE",
                                        "componentType(Type\u003dPrimitiveType)": {
                                          "type": "INT"
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "statement(Type\u003dExpressionStmt)": {
                              "expression(Type\u003dAssignExpr)": {
                                "operator": "ASSIGN",
                                "target(Type\u003dNameExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "newValues"
                                  }
                                },
                                "value(Type\u003dMethodCallExpr)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "set"
                                  },
                                  "scope(Type\u003dMethodCallExpr)": {
                                    "name(Type\u003dSimpleName)": {
                                      "identifier": "getField"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iPartial"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "iFieldIndex"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "newValues"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "text"
                                        }
                                      }
                                    },
                                    {
                                      "argument(Type\u003dNameExpr)": {
                                        "name(Type\u003dSimpleName)": {
                                          "identifier": "locale"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            "statement(Type\u003dReturnStmt)": {
                              "expression(Type\u003dObjectCreationExpr)": {
                                "type(Type\u003dClassOrInterfaceType)": {
                                  "name(Type\u003dSimpleName)": {
                                    "identifier": "Partial"
                                  }
                                },
                                "arguments": [
                                  {
                                    "argument(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "iPartial"
                                      }
                                    }
                                  },
                                  {
                                    "argument(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "newValues"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Partial"
                        }
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "setCopy"
                      },
                      "comment(Type\u003dJavadocComment)": {
                        "content": "\n         * Sets this field in a copy of the Partial to a parsed text value.\n         * \u003cp\u003e\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param text  the text value to set\n         * @param locale  optional locale to use for selecting a text symbol\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the text value isn\u0027t valid\n         "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PUBLIC"
                          }
                        }
                      ],
                      "parameters": [
                        {
                          "parameter(Type\u003dParameter)": {
                            "isVarArgs": "false",
                            "name(Type\u003dSimpleName)": {
                              "identifier": "text"
                            },
                            "type(Type\u003dClassOrInterfaceType)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "String"
                              }
                            }
                          }
                        },
                        {
                          "parameter(Type\u003dParameter)": {
                            "isVarArgs": "false",
                            "name(Type\u003dSimpleName)": {
                              "identifier": "locale"
                            },
                            "type(Type\u003dClassOrInterfaceType)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "Locale"
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dMethodDeclaration)": {
                      "body(Type\u003dBlockStmt)": {
                        "statements": [
                          {
                            "statement(Type\u003dReturnStmt)": {
                              "expression(Type\u003dMethodCallExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "setCopy"
                                },
                                "arguments": [
                                  {
                                    "argument(Type\u003dNameExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "text"
                                      }
                                    }
                                  },
                                  {}
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Partial"
                        }
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "setCopy"
                      },
                      "comment(Type\u003dJavadocComment)": {
                        "content": "\n         * Sets this field in a copy of the Partial to a parsed text value.\n         * \u003cp\u003e\n         * The Partial attached to this property is unchanged by this call.\n         * Instead, a new instance is returned.\n         * \n         * @param text  the text value to set\n         * @return a copy of the Partial with the field value changed\n         * @throws IllegalArgumentException if the text value isn\u0027t valid\n         "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PUBLIC"
                          }
                        }
                      ],
                      "parameters": [
                        {
                          "parameter(Type\u003dParameter)": {
                            "isVarArgs": "false",
                            "name(Type\u003dSimpleName)": {
                              "identifier": "text"
                            },
                            "type(Type\u003dClassOrInterfaceType)": {
                              "name(Type\u003dSimpleName)": {
                                "identifier": "String"
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dMethodDeclaration)": {
                      "body(Type\u003dBlockStmt)": {
                        "statements": [
                          {
                            "statement(Type\u003dReturnStmt)": {
                              "expression(Type\u003dMethodCallExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "setCopy"
                                },
                                "arguments": [
                                  {
                                    "argument(Type\u003dMethodCallExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "getMaximumValue"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Partial"
                        }
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "withMaximumValue"
                      },
                      "comment(Type\u003dJavadocComment)": {
                        "content": "\n         * Returns a new Partial with this field set to the maximum value\n         * for this field.\n         * \u003cp\u003e\n         * The Partial attached to this property is unchanged by this call.\n         *\n         * @return a copy of the Partial with this field set to its maximum\n         * @since 1.2\n         "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PUBLIC"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "member(Type\u003dMethodDeclaration)": {
                      "body(Type\u003dBlockStmt)": {
                        "statements": [
                          {
                            "statement(Type\u003dReturnStmt)": {
                              "expression(Type\u003dMethodCallExpr)": {
                                "name(Type\u003dSimpleName)": {
                                  "identifier": "setCopy"
                                },
                                "arguments": [
                                  {
                                    "argument(Type\u003dMethodCallExpr)": {
                                      "name(Type\u003dSimpleName)": {
                                        "identifier": "getMinimumValue"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "type(Type\u003dClassOrInterfaceType)": {
                        "name(Type\u003dSimpleName)": {
                          "identifier": "Partial"
                        }
                      },
                      "name(Type\u003dSimpleName)": {
                        "identifier": "withMinimumValue"
                      },
                      "comment(Type\u003dJavadocComment)": {
                        "content": "\n         * Returns a new Partial with this field set to the minimum value\n         * for this field.\n         * \u003cp\u003e\n         * The Partial attached to this property is unchanged by this call.\n         *\n         * @return a copy of the Partial with this field set to its minimum\n         * @since 1.2\n         "
                      },
                      "modifiers": [
                        {
                          "modifier(Type\u003dModifier)": {
                            "keyword": "PUBLIC"
                          }
                        }
                      ]
                    }
                  }
                ],
                "modifiers": [
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "PUBLIC"
                    }
                  },
                  {
                    "modifier(Type\u003dModifier)": {
                      "keyword": "STATIC"
                    }
                  }
                ]
              }
            }
          ],
          "modifiers": [
            {
              "modifier(Type\u003dModifier)": {
                "keyword": "PUBLIC"
              }
            },
            {
              "modifier(Type\u003dModifier)": {
                "keyword": "FINAL"
              }
            }
          ]
        }
      }
    ]
  }
}